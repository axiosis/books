<!DOCTYPE html>
<html lang="en">
<head>


  <meta name="Author" content="5HT">
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="super-style.css" type="text/css" rel="stylesheet">
  <script src="super-code.js"></script>

  <title>Ідея Нації
</title>
</head>
<body >
<!--HEVEA command line is: hevea index.tex -o index.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->
<div id="navcontainer" style="margin-top:-8px;margin-left:-8px;margin-right:-8px;border-bottom:1px solid;"><ul id="nav"><li><a href="#">Navigation</a><ul><li><a href="../../../index.html">axiosis</a></li><li><a href="../../index.htm">books</a></li><li><a href="../index.htm">top</a></li></ul></li><li><a href="#">Download</a><ul><li><a href="index.htm">HTML</a></li><li><a href="index.pdf">PDF</a></li></ul></li><li><a href="#">Translations</a><ul><li><a href="#">Namkhai Lhamo</a></li></ul></li></ul><div style="clear:both;"></div></div><!--ENDHTML-->
<!--CUT DEF section 1 --><span style="font-size:x-large">
</span><!--TOC section id="sec1" <span style="font-size:x-large">
<br>
Топ програміст</span>-->
<h2 id="sec1" class="section"><span style="font-size:x-large">
<br>
Топ програміст</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC section id="sec2" <span style="font-size:medium">Поклоніння простору</span>-->
<h2 id="sec2" class="section"><span style="font-size:medium">Поклоніння простору</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec3" <span style="font-size:medium">Топовий програміст</span>-->
<h3 id="sec3" class="subsection"><span style="font-size:medium">Топовий програміст</span></h3><!--SEC END --><p><span style="font-size:medium">Якщо мої передплатники і просять про якусь масштабну контрибуцію,
то це монографію на тему «як стати топовим програмістом».
Хоча таке формулювання інфантильне, воно досить добре
відображає сутність запитуваного: детальний розгляд професії
програміста, стратегію вивчення предмета виходячи з особистого
досвіду, розбавлений автентичною філософією.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec4" <span style="font-size:medium">Висловлювання нескіченної поваги</span>-->
<h3 id="sec4" class="subsection"><span style="font-size:medium">Висловлювання нескіченної поваги</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тим як розпочати розповідь про професію програміста
насамперед хочеться висловити пошану предмету вивчення та
практики програмування, а саме формальним математичним
обчислювальним побудовам, у яких можливе програмування
в принципі. В останні роки стало зрозуміло, що простір
цих побудов настільки глибокий, що може поглинути не
тільки всі дискретні програми всіх формальних граматик,
а й континуальну математику, у якій робота з простором
йде на іншому, більш фундаментальному рівні. Тому без зайвого
перебільшення можна сказати, що саме простір народжує
мовну групу мов, які є первісною матрицю всіх без винятку
мов програмування.</span></p><p><span style="font-size:medium">Принцип глибокої поваги до предмету, який
майстер повинен реалізувати є одним із секретних ключів
східної філософії. Позаяк програмування народжується з
простору феноменологічних побудов, що ведуть до абстрактної
класифікації просторів та логік з ними пов’язаних, то утримання
у фокусі мети вивчення простору та програмування як
практичного людського процесу з цим пов’язаним є
головним завданням на шляху вивчення. Тому, без недооцінки та
зайвого перебільшення можна сказати, що простягання або поклоніння,
як прояв поваги до самого простору, як об’єкту вивчення,
виглядає для мене логічним. Я простягаюся перед простором.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec5" <span style="font-size:medium">Перевірка мотивації</span>-->
<h3 id="sec5" class="subsection"><span style="font-size:medium">Перевірка мотивації</span></h3><!--SEC END --><p><span style="font-size:medium">Важливою характеристикою, яка, хочете вірте, а хочете ні,
впливає на процес вивчення мистецтва програмування, є чистота мотивації.
Якщо розглянути граничный популярний споживацький приклад, то він буде виглядати так:
ваша мотивація полягає у збільшенні своїх навичок програміста для
досягнення матеріальних благ і підвищення конкурентоспроможності
на ринку праці. Повна нісенітниця, така мотивація вприває на критерії
вибору об’єктів вивчення і це може завести вас у ситуацію, коли вам
50 років і ви пишете на Core Java для якось швейцарского банку.
Очевидно, що люди, які просили у мене цей текст, не очікують чогось подібного.</span></p><p><span style="font-size:medium">Свої ілюзії про легкість цього шляху можна відразу відкинути.
Цей шлях по-самурайськи скдадний і на нім сходили з розуму не тільки
випускники прикладної математики, немало людей перегоріло на
підприємствах від перенавантаження та неконтрольованості інформації.
Тому 10 років ув’язнення з постійним виділеним
каналом в інтернет на повному зовнішньому забезпеченні —
ідеальний ресурс, який я рекомендував би виділити для успішної
підготовки на майстра програмування.</span></p><p><span style="font-size:medium">Чому такий великий термін буде пояснено в наступних частинах.
10 років цілком адекватний інтервал навчання для лікаря, то чому для програміста повинно бути менше.
Кількість мов якими кваліфікований програміст володіє на практиці може сягати тисяч,
за кожною з них стоїть теорія, своя логіка і своя математика нею породжена.
Це не просто латина, есперанто та пару мов романо-германської групи.
Половину цього часу можна проводити в реальних проектах, типу інтернатури,
але мов і матеріалів так багато, що для топового програміста 10 років можна виділити тільки на теорію.</span></p><p><span style="font-size:medium">Так, можна і в 50 років влаштуватися на галєру «цифровим сантехніком»,
але це теж ніяк не попадає під курс топового програміста, який повинен
покривати широкий діапазон дисциплін: від створення процесорів, асемблерів,
компіляторів, операційних систем, систем управління базами даних, мережевих протоколів,
сервісів, шин та додатків до теоретико-типових верифікаторів математичних
моделей та теорем, сертифікованих компіляторів, систем доведення теорем.</span></p><p><span style="font-size:medium">Мотивація настільки важлива, що без правильної мотивації висувати будь-які претензії
про марно втрачені 10 років життя абсолютно безрезультатно, сертифікат відкликається.
Як перевірити чистоту мотивації і наскільки точні можуть бути рекомендації?
Можу лиш сказати, що видо повинні бути достатньо чесним перед самим собою, адже програмування
— це складний виснажливий процес, а мислення — найвища форма управління організмом, тому
вади в його роботі можуть призвезти до непоправних наслідків.</span></p><p><span style="font-size:medium">Якщо крім програмування ви нічого не вмієте, то непогано було би розвинутив в собі первні
стратегії відступу: мінімальні техніки управління диханням та дієтою, легкий спорт без
фанатизму, трохи йоги, можливо активні види спорту. Якщо ви вважаєте, що у цілому
ви психічно стабільна людина, то пригутуйтеся до сюрпризів на шляху осягнення загадок
простору без внутрішної чистоти намірів.</span></p><p><span style="font-size:medium">Моєю особистою мантрою, з якою я вивчаю програмування — це посвята резульатів своє
роботи людям та всім істотам, не нашкодивши нікому без виключення.
Взагалі вивчення програмування мало кому може зашкодити та може мати форму глибокого відлюдництва
святого монаха. Хоча є виключення, програмісти, а особливо гарні програмісти,
в своїй більшості не жорстокі істоти, і їх надмірна агресія і сердитість, направлена
в позитивному ключі інстроспекції є двигуном аутичного осягнення потаємностей професії програміста.</span></p><p><span style="font-size:medium">Взагалі, якшо мотивація алзмазної візниці привести усі істот до абсолютного просвітлення
знається вам занадто езотеричної, то хочи би стара етично норма інженерів минулого 
«не нашколь, а краще допоможи людям» є тим мінімомум, який необхідно перевіряти перед кожною сесією
програмування. Уявіть собі, що ви з рвінням лева кладете на вівтар просвітлення 10 років
самоосвіти в області програмування зі скрині свого життя для того аби принести користь людям та суспільству.
Без подібної мотивації вам просто не бути звідки черпати енергію для щоденних вправ в програмуванні та мисленні.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec6" <span style="font-size:medium">Всевідання як джерело натхнення</span>-->
<h3 id="sec6" class="subsection"><span style="font-size:medium">Всевідання як джерело натхнення</span></h3><!--SEC END --><p><span style="font-size:medium">Головна риса характеру, яка необхідна в людині, щоб стати
топовим програмістом — це схильність до вивчення та дослідження феноменів,
їх аналізу, синтезу та абстракції. Це бажання розібрати і
досліджувати іграшку має так глибоко перебувати у свідомості,
що здається, ніби дитина вже народжується з цим даром і
швидко розбиратися у феноменах за належного інтенсивного
навантаження на нейросіточку. Іншими словами — це хакерство,
якщо ви любите досліджувати системи, розбиратися в програмному
коді, розумієте, як працюють процесори, знаєте, як працює
логіка та математика, то ви вже можете стати топовим програмістом.
Бажання побудувати максимально точну модель феномена має
бути гіпертрофованим, воно має бути незакритим гештальтом,
який не дає вам спати ночами, поки ви його не закриєте.
Саме ця фанатична одержимість конвертується в те, що буде
дровами у нашому вогнищі просвітлення на шляху до всезнавства
у світі програмування. Звідки взялося всезнання?
Це друга сторона медалі головного джерела натхнення хакера.
Якщо при локальному розгляді феноменів головною думкою має
бути побудувати максимально точну модель феномену, то при
фокусуванні в нескінченність до країв горизонту, це бажання
проявляється у вигляді максимально швидкого пізнання всіх
феноменів і їх універсальні принципи пристрою. Такий
мета-хакерський трансцедентальний напів-фрічний майндсет
необхідний для розуміння того, наскільки абстрактними і
широкими можуть бути виклики на шляху пізнання глибинних
мов, якими написано наш всесвіт.</span></p><p><span style="font-size:medium">Так, як мови програмування використовуються у всіх сферах
людської діяльності, то топовий програміст абсолютно точно
повинен розбиратися у всіх доменних моделях, усіх типах та
всіх математиках, які виникають у різних мовах програмування.
Зазвичай, університетські 5 років я б рекомендував провести
якраз у охопленні всіх математик та всіх видів мов програмування,
перед тим як поринути у фундаментальну математику та системне
програмування. Взагалі хороша сучасна освіта рівня PhD автоматично
має на увазі вільне володіння мовним та математичним
забезпеченням у дослідженні всесвіту, так що нічого
такого, що не вимагають топові університети, курс
топового програміста в цій частині всезнавства тут не вимагає.
Потрібна повна автономність на рівні полетів у космос і
відновив усі знання та навички за потреби у найкоротші
терміни шляхом легкого спогаду.</span></p><p><span style="font-size:medium">Щоразу поглинаючи якийсь пласт інформації ви вивільняєте
величезний простір свободи, який або заповнюється новими
недослідженими пластами, або звільняється абсолютно, якщо
вже всі пласти поглинули. Але коли ви повністю вичерпаєте
всю карму, тоді буддахуд прийде автоматично, тож це вже
програма максимум. Адже після того, як ви вивчили якийсь
предмет і дали кілька майстер класів по ньому, ви просто
гортаєте всі книги по ньому, за якими навчалися і це все
для вас навіть не буквар, тому що буквар ви вже самі написали,
це для вас просто шум дерев у лісі. Ви повністю вичерпали цей
предмет, стали майстром у ньому, ви вже бачите всі перерізи
глобулярних фазових просторів, маєте на руках кілька моделей
і прототипів. Це стан всезнавства. Бажання цього стану —
необхідний компонент топового програміста.</span></p><p><span style="font-size:medium">Якщо ви побудували якийсь простір феноменів, наповнивши
їх змістом і залишаючись там у комфортному середовищі
обмеженого знання, ви вже втрачаєте топову мотивацію
як компонент всезнання. Не спрямувавши своє мислення
в нескінченність, ви не зможете побачити весь ландшафт
і правильно розставити пріоритети в поглинанні наукових
дисциплін, щоб здійснити &lt;&lt;стрибки Тигра&gt;&gt; між цими
пріоритетними реперними точками.</span></p><p><span style="font-size:medium">Тільки дослідники, які сповнені вродженого бажання будувати
нові теорії та мовні простори, наділені насінням творчості,
що веде до топової реалізації. Міждисциплінарний підхід може
виникнути лише за умов широкого профілю. Ніхто ніколи не
ставив завдання скласти курс для підготовки людей, яких
можна було б назвати культовими хакерами, тому й вимоги
до підготовки мають бути позамежними. Тільки олімпійське
бажання всезнання може реально наблизити вас до нього.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec7" <span style="font-size:medium">Мислення</span>-->
<h2 id="sec7" class="section"><span style="font-size:medium">Мислення</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec8" <span style="font-size:medium">Що таке мислення</span>-->
<h3 id="sec8" class="subsection"><span style="font-size:medium">Що таке мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тим як розпочинати процес навчання непогано було
б кілька слів сказати про основний інструмент у процесі
вивчення — людське мислення. Минаючи фізичні сторони
мислення відразу хочеться поговорити про його когнітивні властивості.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec9" <span style="font-size:medium">Характеристики чистого мислення</span>-->
<h3 id="sec9" class="subsection"><span style="font-size:medium">Характеристики чистого мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Перша і головна властивість мислення — це істотність —
визначальна характеристика істоти. Інтегральна вища форма,
яка керує всіма підсистемами та сприймається істотою,
майндстрімом або аватаром. В одному тілі може жити
кілька майндстрімів, і деякі з них можуть бути програмістами!
Якщо ви думаєте — ви є істотою.</span></p><p><span style="font-size:medium">Друга когнітивна характеристика мислення, яку можна
відчути у медитаціях — це абсолютна сферична відкритість
у всіх напрямках та її безмежність. Така характеристика
мислення навіває думки про ізоморфізм мислення та простору.
З фізичної точки зору, мислення — це складна система квантових
полів, які нашаровуються на квантовий, молекулярний рівень,
нервову систему, тому довго доводити не потрібно, що
мислення як квантово-механічна система поширюється на весь простір.</span></p><p><span style="font-size:medium">Умовно існує два розділи вищої медитації, перший із яких
називається розділом мислення, а другий розділом простору.
Перший розділ присвячений технікам роботи з феноменами,
аналітичної медитації, роботі з мисленням з погляду
майндстріму, очним вправам, розвитку відчуття перспективи,
роботи з уявою, візуалізаціям. Другий розділ присвячений
технікам роботи з мисленням з погляду простору, де мислення
асоціюється з простором, в якому воно перебуває,
неаналітичної медитації, прагнення до нескінченності,
медитації відпочинку.</span></p><p><span style="font-size:medium">Третя когнітивна характеристика мислення, яку можна
сприйняти на досвіді, — це його необумовленість.
Чим вищий рівень розвитку мислення, тим вища його
воля до свободи і необумовленість, до перевірки,
критичного мислення і переоцінювання. У своїй повній
свободі мислення вільно обирає спрямованість і інтенсивність
потоку, без різких перепадів і гормональних фонів,
рухаючись оптимальною траєкторією дорослішання плоду
мислення на шляху до всезнавства.</span></p><p><span style="font-size:medium">Четверта характеристика мислення – це безперервність.
Будь-які спроби зупинити мислення приводять у місце
самоусвідомлення як несучу частоту відчуття присутності
себе в цьому світі, в медитації. Навіть у процесі сну,
мислення не спить, а перетворюється на інший агрегатний
стан, більш розріджене, часом безформне, нечітке,
мерехтливе. Повний контроль над безперервністю мислення,
від якої не можна відмовитись і яку не можна припинити —
завдання топового програміста на шляху до звільнення
ресурсів для вивчення програмування. Чим більша точність
дискретизації цього контролю – тим краще. Контроль за
безперервністю мислення називається точністю мислення.</span></p><p><span style="font-size:medium">П’ята характеристика мислення – взаємозалежність. Ви
як мислення — це продукт абсорбції інших фрагментів
мислень чи просто феноменів, тому обумовлені цією спадщиною.
Вирватися за межі цієї традиції та розкопати інсайти на шляху
еволюції свого мислення – справжня коштовність як нагорода за
працю навчання. Коли ви стаєте майстром, обумовленість зникає,
ви реструктуруєте себе наново виходячи вже з особистого досвіду,
побудованого на низці інсайтів, за якими ви стрибаєте на шляху
до майстерності. І навіть їх ви потім зможете видалити і забути
зі свого мислення залишивши тільки пам’ять про те, як потрібно
одразу робити правильно, можливо і не згадайте навіть,
коли вас спитають, як це ви так швидко помудріли, а навіщо.</span></p><p><span style="font-size:medium">Ці п’ять характеристик послужать вам підказками у якому
ключі потрібно думати про своє мислення (перша похідна)
як інструмент пізнання, можливо для істот з високими
здібностями це одразу прояснить деякі моменти. Будь-яка
нездатність спостерігати ці характеристики в практичних
медитаціях або роздумах про своє мислення, говорить про
те, що їх потрібно розвивати, або зайнятися йогою, піти
до психолога, розвіятися з друзями, піти в бар, сісти
на таблетки, склянку, все за бажанням — головне щоб
спрацювало! Чек лист пройшли переходимо до рекомендацій та індикатора</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec10" <span style="font-size:medium">Коштовне намисто мислення</span>-->
<h3 id="sec10" class="subsection"><span style="font-size:medium">Коштовне намисто мислення</span></h3><!--SEC END --><p><span style="font-size:medium">У традиції Тибету існує шість типів мислення або програм, які вважаються,
позитивно можуть вплинути в цілому на процес вивчення, роздуми і медитації.</span></p><p><span style="font-size:medium">Щедрість у контексті мислення означає не скупитися в процесі вивчення,
не хапатися за все одразу, мати методологію, з повагою ставиться до
будь-якої обраної теми, раз вона вже спливла в медитації як комлекс,
який все одно доведеться закрити (пізнати). Здатність до реплікації, викладання,
зворотної контрибуції по дорозі поглинання інформації — це щедрість мислення.</span></p><p><span style="font-size:medium">Дисципліна означає, що мислення має дотримуватися якогось спортивного,
бажано олімпійського режиму, надто хаотичні режими мислення не
сприятимуть навчанню, тому приступати до еволюції свого мислення
потрібно, коли гормональне тло може залишатися рівним значний час,
це необхідно для глибоких медитацій, без яких неможливий прогрес.</span></p><p><span style="font-size:medium">Терпіння – це здатність переносити проблеми у процесі навчання.
Є матеріал, який може не закриватися роками, але до нього все
одно доведеться повертатися, адже назад дороги немає, обрано
шлях топового програміста. На шляху може бути занадто багато
інсайтів і надто багато наснаги, яке може створювати гормональне
тло, яке не завжди можна контролювати, пересиджувати на бенчі
такі періоди — це терпіння.</span></p><p><span style="font-size:medium">Старанність — означає з непідробним інтересом вивчати предмети,
тому правильно їх розмістити дуже важливо. Можливо, саме для вас
існує своя послідовність предметів, кожен з яких в окремий момент
часу ви вивчатимете з максимальною старанністю. Із цим доведеться
працювати, кожному індивідуально.</span></p><p><span style="font-size:medium">Фокусування — фокусування, чи концентрація, чи медитація,
чи шаматха — це основний режим роботи програміста. Ось ви
сіли за комп’ютер, поставили чашку з кавою, протерли дисплей,
всмокталися в пікселі, запустили шелл — ви сфокусовані на
роботі, це медитація.</span></p><p><span style="font-size:medium">Мудрість — це система накопичених інсайтів, що формує нові
структури мислення, нову його топологію. Ця система може
переписувати старі неефективні та невалідні структури,
з яких ми сміємося подорослішавши. Мислення мудрості — це
мислення, засноване виключно на таких перевірених рафінованих
структурах, які покладені в фундамент нашої істоти.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec11" <span style="font-size:medium">Отрути мислення</span>-->
<h3 id="sec11" class="subsection"><span style="font-size:medium">Отрути мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Три найбільш несприятливі форми мислення з моєї особистої класифікації.</span></p><p><span style="font-size:medium">Інертність мислення – це колесо медитації. Будучи вкотре
запущена деяка звичка, йде у автоматичний режим на
підсвідомість — це інертність. Якби не було інертності
мислення, ми б не змогли вчитися. Хоча це корисна властивість
мислення, іноді буває погано, коли погано — потрібно
відловлювати. Зрозуміло, що бешкетувати своє мислення,
яке заховано в підсвідомості не вчать у школах, доведеться працювати самому.</span></p><p><span style="font-size:medium">Лінощі. Занадто інтенсивне мислення може перерости в затяжну
рекреаційну прокрастинацію, яка зміниться лінощами.
Спостереження за видимим прогресом необхідно, яким би був
охуенный відпочинок треба повертатися за програмування,
оновлювати мотивацію, якщо потрібно щодня.</span></p><p><span style="font-size:medium">Байдужість. Корінь усіх отрут, жадібності та іншого. Якщо
вам все раптом стало байдуже, це дуже погано, але не смертельно.
Іноді може перерости в екзистенційну кризу, але ж ми з вами вже
домовилися, що тіло, йогу і таблетки і своє самопочуття ви
берете на себе, з мене тільки рекомендації щодо процесу
навчання. Занедбана байдужість — це тупість.</span></p><p><span style="font-size:medium">Нічого хорошого успішного студента, який виходить за
перерахування чеснот, тут немає. Як і першому випадку
постійно застосовуємо техніку роздуми, вивчення та
медитації до цих видів мислення, як і до основних характеристик
мислення. Постійно проходимо валідацію свого мислення відповідно
до вибраних індикаторів.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec12" <span style="font-size:medium">Простір професійного розвитку</span>-->
<h2 id="sec12" class="section"><span style="font-size:medium">Простір професійного розвитку</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec13" <span style="font-size:medium">Структура курсу</span>-->
<h3 id="sec13" class="subsection"><span style="font-size:medium">Структура курсу</span></h3><!--SEC END --><p><span style="font-size:medium">Не те, щоб це була якась новина, впевнені багато
хто дотримується такої карти топового програміста,
але я візьму на собі сміливість відкрити це таємне
знання. Почну опис курсу з відомої мемної картинки.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec14" <span style="font-size:medium">Дракон</span>-->
<h3 id="sec14" class="subsection"><span style="font-size:medium">Дракон</span></h3><!--SEC END --><p><span style="font-size:medium">Юнікорнами називають тих програмістів, які однаково
добре володіють CSS скажімо, а також можуть повністю
побудувати будь-якої складності тонкий чи товстий
клієнт не обмежуючись HTML5, а й переходячи у SVG
чи WPF, чи DirectX чи OpenGL.</span></p><p><span style="font-size:medium">Фулстек програмістами називають фахівців із
побудови інформаційних систем на кордоні з
єдинорогами (які зазвичай не займаються процесиногом,
інфраструктурою, мережами та захистом).</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index001.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 1: Дракон</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC subsection id="sec15" <span style="font-size:medium">Лямбдагарбха</span>-->
<h3 id="sec15" class="subsection"><span style="font-size:medium">Лямбдагарбха</span></h3><!--SEC END --><p><span style="font-size:medium">Наступний рівень – це платформоутворюючий рівень,
який включає мову програмування, рантайм та апаратуру.
Зазвичай дорослі академічні мови створюються відразу з
рантаймом, тому назвемо цю секцію рівень університетського
професора, а секцію рантайму (ОС) та апаратура назвемо
підприємницької, оскільки ОС зазвичай продають разом
із залізом і всі, хто це намагався просувати на ринок,
можна прирівняти до бодхісатств. Останні відомі лямбдагарбхи —
це давні автори перших Лісп машин та XEROX PARC.</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index002.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 2: Лямбдагарбха</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC subsection id="sec16" <span style="font-size:medium">Гротендік</span>-->
<h3 id="sec16" class="subsection"><span style="font-size:medium">Гротендік</span></h3><!--SEC END --><p><span style="font-size:medium">На абсолютном уровне программисты (в том числе и топовые) являются математиками, поэтому тут можно отметить ядро которое было открыто Квилленом — модельные категории, в которых работали не только медалисты Филдса — Воеводский и сам Квиллен, но которые являются также основным инструментом современных теоретико-типовых математиков как Шульман. Предмет изучающий модельные категории Квиллен назвал гомотопической алгеброй, при помощи которой была построена не только модель алгебраической топологии самим Квилленом, но и А1-теория гомотопий Воеводского. Все это крышуется Гротендиком, как мультидисциплинарным программистом абсолютного уровня (топ-математиком).</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index003.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 3: Гротендік</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC subsection id="sec17" <span style="font-size:medium">Будда</span>-->
<h3 id="sec17" class="subsection"><span style="font-size:medium">Будда</span></h3><!--SEC END --><p><span style="font-size:medium">Без лишней скромности, любой программист который смог не только представить, но и успеть порабать за жизнь на всех уровнях, может считать себя Буддой программирования, или как мы скромно называем таких пацанов — хуй с горы.</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index004.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 4: Будда</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC section id="sec18" <span style="font-size:medium">Теоретичні основи</span>-->
<h2 id="sec18" class="section"><span style="font-size:medium">Теоретичні основи</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec19" <span style="font-size:medium">Метафілософія</span>-->
<h3 id="sec19" class="subsection"><span style="font-size:medium">Метафілософія</span></h3><!--SEC END --><p><span style="font-size:medium">Дуже коротко про сучасні філософії. Як визначити філософію предикативно,
то це науа, що вивчає наступний перелік питань:
1) як жити добре в достатку та гедонізмі максимально довго всім і не померти від воєн та метеоритів;
2) реальний світ та інші питання гнесеології;
3) свобода волі;
4) етика;
5) математика;
6) музика;
6) література,
— це всі питання, або мовні набори та форми, що цікавлять сучасних філософів.</span></p><p><span style="font-size:medium">У цій нотатці ми спробуємо побудувати формальну систему
і на її прикладі показати інтерпретацію трьох ліній
передачі сучасної філософії: європейської чи континентальної
філософії — школи, яка задала початок глобальній
інтерпретації світу та реконструкції мов, у тому числі
й математики; східної філософії як приклад особливої школи,
на прикладі якої ми будуватимемо модель; та аналітичної чи
англосаксонської філософії, що формалізується сучасною математикою.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec20" <span style="font-size:medium">Європейска філософія</span>-->
<h3 id="sec20" class="subsection"><span style="font-size:medium">Європейска філософія</span></h3><!--SEC END --><p><span style="font-size:medium">На наш погляд, головне питання європейської філософії — це Good Life.
Як жити, як жити добре самому, у соціумі, які цілі можуть стояти перед
індивідом та видом, баланс етики та етика балансу. Європейська
філософія народила геометорію, психоаналіз, навчила людей не
боятися свободи, трансформувати агресію, бути більш зрілою
істотою, і під вінець свого розвитку поставила питання про
мову та мовну гру, як основний інструмент рефлексуючої свідомості.</span></p><p><span style="font-size:medium">Мова перестала мати ґрунт, вона стала просто візерунками, семантика
яких втрачена, філософія стала формою літературного мистецтва.</span></p><p><span style="font-size:medium">Представники континентальної філософії: Арістотель, Платон, Кант,
Декарт, Ніцше, Фрейд, Юнг, Юм, Хайдегер, Адорно, Хабермас, Делез.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec21" <span style="font-size:medium">Тибетська філософія</span>-->
<h3 id="sec21" class="subsection"><span style="font-size:medium">Тибетська філософія</span></h3><!--SEC END --><p><span style="font-size:medium">У східній філософії центральним питанням є визволення себе
і інших, в першу чергу від різних форм страждання. Ця філософія
має чітку систему, яка нерозривно пов’язана з тілесними та
розумовими практиками, і вижила протягом тисячоліть у
законсерованому гірському плато. Тут також порушуються
питання етики та свободи волі, але основний наголос робиться
на інтелектуальні та неконцептуальні вправи, що ведуть до
безпосереднього переживання простору.</span></p><p><span style="font-size:medium">Деякі формулювання східної філософії, такі як недвійність
всіх феноменів піддаються формалізації в гомотопічній
теорії типів (використовуючи методи аналітичної філософії),
що спонукало до подальших досліджень у галузі формалізації
езотеричних теорій.</span></p><p><span style="font-size:medium">Представники східної (тибетської) філософії: Атіша, Нагарджуна,
Бхававівека, Камалашила, Шантаpакшита, Арьядева, Бyддхапаліта,
Чандракірті, Цонкапа, Міпам, Лонгченпа.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec22" <span style="font-size:medium">Аналітична філософія</span>-->
<h3 id="sec22" class="subsection"><span style="font-size:medium">Аналітична філософія</span></h3><!--SEC END --><p><span style="font-size:medium">Аналітична філософія народжена в математиці, рання аналітична
філософія починається напевно з Лейбніца, Ньютона та Ейлера.
Пізня аналітична філософія починається З Фреге і за списком:
Рассел, Уайтхед, Дедекінд, Пеано, Гільберт, Фон-Нейман, Каррі,
Акерманн, Карнап, Сколем, Пост, Гедель, Черч, Берньє, Тюрінг,
Кліні, Россер, Мак-Лейн Ловір, Гротендік, Скотт, Джояль,
Терньє, Мартін-Леф, Мілнер, Жирар, Плоткін, Рейнольдс,
Бакус, Барр, Барендрехт, Лер’є, Силі, Кокан, Х’юет, Ламбек,
Воєводський, Еводі, Шульман, Шрайбер.</span></p><p><span style="font-size:medium">Якщо описати двома словами головне питання аналітичної
філософії — це мова простору. Побудова мови, яка дасть
формальний фундамент не лише математики та роздумів, а й самої філософії.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec23" <span style="font-size:medium">Мова простору</span>-->
<h4 id="sec23" class="subsubsection"><span style="font-size:medium">Мова простору</span></h4><!--SEC END --><p><span style="font-size:medium">Формальні підстави мови роздумів, математики (усієї) та фізики (всесвіту).</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec24" <span style="font-size:medium">Мовні фреймворки</span>-->
<h4 id="sec24" class="subsubsection"><span style="font-size:medium">Мовні фреймворки</span></h4><!--SEC END --><p><span style="font-size:medium">Мовні фреймворки для менш формальних (з парадоксами) та нечітких (стохастичних) систем.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec25" <span style="font-size:medium">Конкретні соціальні дифузійні моделі</span>-->
<h4 id="sec25" class="subsubsection"><span style="font-size:medium">Конкретні соціальні дифузійні моделі</span></h4><!--SEC END --><p><span style="font-size:medium">Прикладна філософія Використання мовних фреймворків для опису конкретних феноменів.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec26" <span style="font-size:medium">Таємні настанови</span>-->
<h2 id="sec26" class="section"><span style="font-size:medium">Таємні настанови</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec27" <span style="font-size:medium">Аспекти курсу</span>-->
<h3 id="sec27" class="subsection"><span style="font-size:medium">Аспекти курсу</span></h3><!--SEC END --><p><span style="font-size:medium">После того, как в первых двух главах мы рассказали о топовой мотивации и топовом мышлении, перейдем к топовому курсу топового программиста. Структура этого курса программирования возможно будет очень сильно отличаться от других подходов к обучению, но этот курс является курсом, который я пытался "увидеть" сквозь ретроспективу своего профессионального опыта, касающегося непосредственно программирования, того, как я вижу топовость этого процесса.
<br>
Перед тем как начать со структуры курса, я хочу показать основные индикаторы (аспекты курса), на которые стоит ориентироваться при выборе топовых направлений в программировании. Потому, что именно эти индикаторы и определяют те предметы и их последовательность в которой вы должны поглащать информацию, чтобы приблизиться к максимальной топовости.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec28" <span style="font-size:medium">Гранична точність</span>-->
<h3 id="sec28" class="subsection"><span style="font-size:medium">Гранична точність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная точность означает абсолютные вычисления. В эту вымышленную категорию я включаю все области программирования и математического моделирования, которые требуют абсолютной формальной точности: системы доказательства теорем, специализированные формальные верификаторы моделей, системы символьной алгебры, ситемы вычислительной гомологической алгебры, т.е. те системы моделирования, которые не только раскладывать саму систему до атомов, но еще и ближашую метамодель на уровень выше, которую тоже нужно формализировать, чтобы верифицировать сами модели. Сюда входят такие отрасли как процессоростроение (модел чекеры печатных плат, процессоров, специализированные языки программирования типа VHDL), языкостроение (системы типов, формальные языки программирования, языки общего назначения). Сюда также входят: любые формальные математические теории, формальные логики, язык кванторов Пи и Сигма.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec29" <span style="font-size:medium">Гранична оптимальність</span>-->
<h3 id="sec29" class="subsection"><span style="font-size:medium">Гранична оптимальність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная оптимальность означет минимальное количество усилий приложенное к достижению цели. Сюда входят дискретные задачи мини-макса, линейное программирование, симплекс методы, полиэдральное мномерное симплектическое программирование, методы оптимизаций. В физике это основной принцип вариационного исчисления, минимальные геодезические линии. Ваша система не только должна быть максимально точной, в апогее абсолютно точной, но и должна быть закодирована оптимальным образом, не содержать повторяющихся частей, занимать минимальный футпринт по ограниченному количеству памяти и вычислительных мощностей. Лучше, чтобы была теорема которая доказывает эту минимальность, как например черч-кодировка индуктивных типов как естественная кодировка любых структур в лямбда исчислении, оптимальные лямбда эвалуаторы и т.д. Предельная оптимальность означает также высший пилотаж в прототипировании и создании MVP эскизов.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec30" <span style="font-size:medium">Гранична складність</span>-->
<h3 id="sec30" class="subsection"><span style="font-size:medium">Гранична складність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная сложность означает дословно максимальную сложность системы с которой нужно работать. Если вдруг окажется, что вам сложности декартово-замкнутых категорий мало, всегда можно перейти в симметрические модальные категории в которых живут следующие языки программирования: квантовые языки программирования, конкруретные паралельные системы типа Erlang, системы линейных типов, языки для обработки тензоров. Также предельная сложность подразумевает наличие уже в системе предельной точности и предельной оптимальности, иначе без первого у вас будет просто неработающее говно, в отсуствии второго у вас будет миллионы строк дублирующего кода, которые не влияют на реальную сложность проекта. Если вы хотите увидеть реальную сложность посмотрите кубические доказательства из К-теории.</span></p><p><span style="font-size:medium">Это что касается более менее чистых тем из логики, дискретной математики, и программирования. В междисциплинарном подходе, если вы хотите стать не топовым программистом, а, например, топовым биофизиком, то список тем будет другой. Предельная точность там заменяется на математическую статистику и стохастическую физику, предельная оптимальность связана с топологией пространств, а предельная сложность выражается в объединений полей и, как пример, стандартной модели. Ну а в биофизике сложность увеличивается топологическими многообразиями нейросетей как иерархических процесов работающих со тензорными потоками. Гомотопическая теория типов как язык программирования инфитини топоса является в физике аналогом теории струн. Биофизика же представляет собой более диссипативные структуры, которые теряют границы точности, таким образом задача создания AI не в полной мере соотвествует абсолютной точности. Я бы сказал что AI это больше системная инженерия и прикладная область, в то время как абсолютная точность это больше сфера математического программирования. И даже машинное обучение при детальном рассмотрении сводится к статистической точности, прогнозируемой оптимальности и системной сложности.</span></p><p><span style="font-size:medium">Я, как сторонник абсолютной сложности, считаю, что любая современная PhD должна содержать междисциплинарный подход. В качестве необходимого минимума в международной научной практике предлагаю рассмотреть междисциплинарный подход, который базируется всего на двух особенных дисциплинах: УДК 51 (математика) и УДК 004 (программирование). В качестве особенных они выбраны потому, что любая другая дисциплина базируется на чистой математике, а для проведения любого моделирования (перепроверке теории), нужен фундаментальный курс программирования.</span></p><p><span style="font-size:medium">Интересно, что третий из этих индикаторов можно инвертировать и при этом оптимизационный вектор (максимальная точность, максимальная оптимальность и минимальная сложность) тоже окажется интересным объектом рассмотрения. В существе это требования выдвигаемые к библиотекам программного обеспечения: они должны быть максимально формальными с доказательствами свойств их моделей, должны быть оптимально смоделированы или обладающие оптимальным экстрактом в другие модели, но при этом также должны быть максимально простыми или минимально сложными в общей картине компонент. Философия N2O в точности соотвествует такому альтернативному оптимизационному вектору, но решая задачи технологических стеков нельзя стать топовым программистом, нужно увеличивать сложность, например в сторону сложных социо-информационных систем, как ERP системы управления предприятием, где десятки тысяч таблиц каждая по сотне полей привычная сложность для бизнес аналитиков, работающих с такими продуктами как SAP S/4.</span></p><p><span style="font-size:medium">Забавно, что в эзотерическом тибетском буддизме, эти три критерия применяются в наставлениях по визуализации в высших тантрах: вы должны максимально детально (до волос и фактуры тканей одежды — принцип максимальной точности) представить очень сложный объект (18-рукое божество в союзе с супругой, свитой и аттрибутами — принцип максимальной сложности) максимально быстро (желательно мгновенно — принцип оптимальности). Ученики, которые могут это делать не "на словах", а "на деле" — встраивая картинку силой мысли и воображения даже не на сечатку глаза, а прямо на кору головного мозга, выжигая изображение в своем мышлении на простыне воображаемой вселенной — считаются топовыми медитаторами. Для наглядного примера хочу показать приблизительное качество визуализации удерживаемое в пространстве своего мышления, которого может добиться средний по способностям европеоид-медитатор за 3 года упорной практики:</span></p><p><span style="font-size:medium">Наверно поэтому до сих пор не существует ни одного просветленного европейца! Эта картинка также наглядная демонстрации того, что вы можете достичь за 3 года обучения (думаю, что у отдела PhD ребят из NASA, подготовка к рендеру этой картинки заняла три года как раз).</span></p><span style="font-size:medium">
</span><!--TOC section id="sec31" <span style="font-size:medium">Практика</span>-->
<h2 id="sec31" class="section"><span style="font-size:medium">Практика</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec32" <span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span>-->
<h3 id="sec32" class="subsection"><span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span></h3><!--SEC END --><p><span style="font-size:medium">Рано или поздно, все кто занимается йогой ума при должном успехе, так или иначе переходят к освоению йоги тела, которое является продолжением ума. Секрет успешной практики в том, что как и йога ума, йога тела требует еще более острой осознанности. Под йогой тела мы будем понимать здесь такого рода энергии, которые вы можете пережить только в режиме эксремального спорта, там где ревард очень высокий. В спорте это X-спорт, в сексе это BSDM, подходит все дисциплины, где есть стоп-слово, за границей которого сразу наступает терминация существа.
<br>
<br>
Почему йога тела должна идти обязательно после укрпления в практике йоги ума? На это есть несколько причин. Считается, что основа устойчивого и взрослого мышления это правильное мировозрение, которое должно формироваться существом в период изучения философских дисциплин, нерешенных вопросов трансгуманизма и других базовых принципов. Придерживаясь внесектарного стиля, самые базовые принципы мировозрения топового программисты были зацементированы в первом выпуске.
<br>
<br>
Положив неправильный майндсет в основание Изучения, Размышления и Медитации вы создате брешь, через которую в критический момент вашей жизни при встрече с Буддой ваше видения мира разрушиться как детский замок из песка после прилива. Для тренировки ума алмазной крепкости и остроты и предназначены практики формирования правильно взгляда на объект ислледования свой собственный ум, за предалами котого не существуют никакие феномены.
<br>
<br>
Как и йога ума, йога тела предусматривает два режима исследования: пандита стайл (изучение теории) и йога стайл (практика). Усвоившись и укрепившись в своем сознании, существо движущиеся главным принципом будда-таковости, стремлением к всезнанию и полной реализации, зерном которого является познание феноменов, начинает выходить за рамки ментальных феноменов и начинает осознавать себя и свое тело как часть мышления, и естественным образом начинает экспериментировать с телом, расширяя свой фронтир восприятия.
<br>
<br>
Главный критерий который показывает можно ли вам переходить к спорту это полный контроль над дофаминовой и эпинифриновой системой. Некоторые слишком впечатлительные спортсмены используют THC для суппрессии дофамина и более мягкой йога-сессии. Обычно рекомендуется входить в спорт в 40 лет, потому что в 25 и несколько лет после нужно посвятить математике и философии, ведь лучшего времени уже не будет и вернуть его будет непросто! А в 40 уже дофаминовый фон сам по себе исчезнет и останется только чистый ум и террейн. Это вторая безжалостная причина по которой спорт лучше отложить до adult возраста. Есть и другая сторона медали: раны после 40 заживают хуже, поэтому и ставки и острота и ревард в таком случае выше. Идеально это имея острый ум не совершать вообще серьезных ошибок на пути спорта. Неидеальные случаи решаются имплантацией титановых пластин.
<br>
<br>
Коcвенный критерий это когда вы достигли уровня непосредственного переживания отождествления языка пространства (выпуск Х), карты местности (выпуск 4) и своего мышления (выпуск 2), в таком случае выход из локальной самсары в виде темницы ума будет знаменовать выход в реальный мир на планету Земля. Алегория которая мне видится здесь такая: мать отправляют своего сына в университет передав ему все необходимые знания, которые помогут ему жить дальше автономно.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec33" <span style="font-size:medium">Программування та спорт</span>-->
<h3 id="sec33" class="subsection"><span style="font-size:medium">Программування та спорт</span></h3><!--SEC END --><p><span style="font-size:medium">Гуру в спорте найти так же тяжело как и гуру в программировании. В светской жизни гуру спорта работают олимпийскими чемпионами или чемпионами в дисциплинах которые к этому приравниваются. Само их существование уже является учением. Разбирая до мельчайших деталей покадрово трейсы топ-спорсменов на youtube вы получаете алмазные знания виртуоза-ньюскулера методично оттачивая технику имея образец для верификации. Гуру спорта поменьшего калибра будут работать инструкторами на ближайшем спортивном курорте, рекламировать газировку и эквипмент или предлагать вам туры по национальным заповедникам.
<br>
<br>
Не все это говорят прямо, но в спорте важными являются картинки которые проходят через вашу сеточку и все органы чувств, поэтому ценятся картинки естественного ландшафта Земли, чтобы освободить свое мышление уже за границами тела, охватив своим мышлением всю планету и ее феномены, главный из которых гравитация, таким образом став воистину космическим ребёнком планетарного масштаба.
<br>
<br>
Однако в разговорах с локальными спортивными гуру вы получите максимум репрессивные монотонные лекции о вреде курения на Джомолунгме, ужасные команды инструкторов-обывателей, толпы туристов на своём пути. Взрослый человек овладевший йогой ума сам должен стать себе гуру и планировать каждую вылазку на встречу с гравитацией как проект с многими параметрами-переменными, от проработки которого зависит ваша жизнь.
<br>
<br>
Все эти гуру будуть говорить вам, что только они понимают суть вещей, познали природу в не-мышлении, а у вас большой груз йоги-ума, который мешает вам достигать результатов, заморочки, излишняя концептуализация, чрезмерная начитанность, и другие смертные грехи. Тут действует такое же правило как и в детском саде, школе или университете "умных не любят", поэтому имейте это ввиду собравшись поговорить по душам за костром с очередным спортивным гуру.
<br>
<br>
Разумный и рациональный человек всегда выберет более редкую и филигранную йогу ума вместо йоги тела, которой владеет гораздое большее количество существ. Ведь получить алмаз ума гораздо сложнее чем алмаз тела, поэтому партнеры по спорту и даже локальные гуру, будут готовы в прямом смысле подсознательно вас убить на склоне, тут тоже нужен глаз да глаз.
<br>
<br>
В тибетском буддизме аналогом спорта является тайное посвящение каналов, ветров и сфер структуры вашей алмазной сети. Все эти йоги выполняются в паре с опорой на партнера и добраться до этого уровня будет затруднительно обывателю. Тем более, что таких гуру еще меньше чем спортивных.
<br>

</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec34" <span style="font-size:medium">Баланс</span>-->
<h3 id="sec34" class="subsection"><span style="font-size:medium">Баланс</span></h3><!--SEC END --><p><span style="font-size:medium">Главный наркотик для йоги-ума и йоги-тела это сахар. Все спорсмены как минимум висят на кока-коле, ред-булле, гелях, стимуляторах. Баланс этих веществ и правильное питание ключ к быстрому восстановлению после спортивных сессий, которые так или иначе нужно будет залечивать перед полноценными сессиями йоги ума. Игнорировать вспомонательные вещества на пути спорта глубо, но и злоупотреблять не стоит. Главный критерий, непрерывность, вы должны планировать ваше путешествие таким образом, чтобы ваше сознание не пошатнулось от внезапного изменения гормонального фона, дефицита того или иного топливного элемента.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec35" <span style="font-size:medium">Посвята всім святим програмістам</span>-->
<h2 id="sec35" class="section"><span style="font-size:medium">Посвята всім святим програмістам</span></h2><!--SEC END --><!--CUT END -->
<!--HTMLFOOT-->
<!--ENDHTML-->
</body>
</html>
