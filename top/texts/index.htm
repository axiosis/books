<!DOCTYPE html>
<html lang="en">
<head>


  <meta name="Author" content="5HT">
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="super-style.css" type="text/css" rel="stylesheet">
  <script src="super-code.js"></script>

  <title>Ідея Нації
</title>
</head>
<body >
<!--HEVEA command line is: hevea index.tex -o index.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->
<div id="navcontainer" style="margin-top:-8px;margin-left:-8px;margin-right:-8px;border-bottom:1px solid;"><ul id="nav"><li><a href="#">Navigation</a><ul><li><a href="../../../index.html">axiosis</a></li><li><a href="../../index.htm">books</a></li><li><a href="../index.htm">top</a></li></ul></li><li><a href="#">Download</a><ul><li><a href="index.htm">HTML</a></li><li><a href="index.pdf">PDF</a></li></ul></li><li><a href="#">Translations</a><ul><li><a href="#">Namkhai Lhamo</a></li></ul></li></ul><div style="clear:both;"></div></div><!--ENDHTML-->
<!--CUT DEF section 1 --><span style="font-size:x-large">
</span><!--TOC section id="sec1" <span style="font-size:x-large">
<br>
Топ програміст</span>-->
<h2 id="sec1" class="section"><span style="font-size:x-large">
<br>
Топ програміст</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC section id="sec2" <span style="font-size:medium">Поклоніння простору</span>-->
<h2 id="sec2" class="section"><span style="font-size:medium">Поклоніння простору</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec3" <span style="font-size:medium">Топовий програміст</span>-->
<h3 id="sec3" class="subsection"><span style="font-size:medium">Топовий програміст</span></h3><!--SEC END --><p><span style="font-size:medium">Якщо мої передплатники і просять про якусь масштабну контрибуцію,
то це монографію на тему «як стати топовим програмістом».
Хоча таке формулювання інфантильне, воно досить добре
відображає сутність запитуваного: детальний розгляд професії
програміста, стратегію вивчення предмета виходячи з особистого
досвіду, розбавлений автентичною філософією.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec4" <span style="font-size:medium">Висловлювання нескіченної поваги</span>-->
<h3 id="sec4" class="subsection"><span style="font-size:medium">Висловлювання нескіченної поваги</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тим як розпочати розповідь про професію програміста
насамперед хочеться висловити пошану предмету вивчення та
практики програмування, а саме формальним математичним
обчислювальним побудовам, у яких можливе програмування
в принципі. В останні роки стало зрозуміло, що простір
цих побудов настільки глибокий, що може поглинути не
тільки всі дискретні програми всіх формальних граматик,
а й континуальну математику, у якій робота з простором
йде на іншому, більш фундаментальному рівні. Тому без зайвого
перебільшення можна сказати, що саме простір народжує
мовну групу мов, які є первісною матрицю всіх без винятку
мов програмування.</span></p><p><span style="font-size:medium">Принцип глибокої поваги до предмету, який
майстер повинен реалізувати є одним із секретних ключів
східної філософії. Позаяк програмування народжується з
простору феноменологічних побудов, що ведуть до абстрактної
класифікації просторів та логік з ними пов’язаних, то утримання
у фокусі мети вивчення простору та програмування як
практичного людського процесу з цим пов’язаним є
головним завданням на шляху вивчення. Тому, без недооцінки та
зайвого перебільшення можна сказати, що простягання або поклоніння,
як прояв поваги до самого простору, як об’єкту вивчення,
виглядає для мене логічним. Я простягаюся перед простором.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec5" <span style="font-size:medium">Перевірка мотивації</span>-->
<h3 id="sec5" class="subsection"><span style="font-size:medium">Перевірка мотивації</span></h3><!--SEC END --><p><span style="font-size:medium">Важливою характеристикою, яка, хочете вірте, а хочете ні,
впливає на процес вивчення мистецтва програмування, є чистота мотивації.
Якщо розглянути граничный популярний споживацький приклад, то він буде виглядати так:
ваша мотивація полягає у збільшенні своїх навичок програміста для
досягнення матеріальних благ і підвищення конкурентоспроможності
на ринку праці. Повна нісенітниця, така мотивація вприває на критерії
вибору об’єктів вивчення і це може завести вас у ситуацію, коли вам
50 років і ви пишете на Core Java для якось швейцарского банку.
Очевидно, що люди, які просили у мене цей текст, не очікують чогось подібного.</span></p><p><span style="font-size:medium">Свої ілюзії про легкість цього шляху можна відразу відкинути.
Цей шлях по-самурайськи скдадний і на нім сходили з розуму не тільки
випускники прикладної математики, немало людей перегоріло на
підприємствах від перенавантаження та неконтрольованості інформації.
Тому 10 років ув’язнення з постійним виділеним
каналом в інтернет на повному зовнішньому забезпеченні —
ідеальний ресурс, який я рекомендував би виділити для успішної
підготовки на майстра програмування.</span></p><p><span style="font-size:medium">Чому такий великий термін буде пояснено в наступних частинах.
10 років цілком адекватний інтервал навчання для лікаря, то чому для програміста повинно бути менше.
Кількість мов якими кваліфікований програміст володіє на практиці може сягати тисяч,
за кожною з них стоїть теорія, своя логіка і своя математика нею породжена.
Це не просто латина, есперанто та пару мов романо-германської групи.
Половину цього часу можна проводити в реальних проектах, типу інтернатури,
але мов і матеріалів так багато, що для топового програміста 10 років можна виділити тільки на теорію.</span></p><p><span style="font-size:medium">Так, можна і в 50 років влаштуватися на галєру «цифровим сантехніком»,
але це теж ніяк не попадає під курс топового програміста, який повинен
покривати широкий діапазон дисциплін: від створення процесорів, асемблерів,
компіляторів, операційних систем, систем управління базами даних, мережевих протоколів,
сервісів, шин та додатків до теоретико-типових верифікаторів математичних
моделей та теорем, сертифікованих компіляторів, систем доведення теорем.</span></p><p><span style="font-size:medium">Мотивація настільки важлива, що без правильної мотивації висувати будь-які претензії
про марно втрачені 10 років життя абсолютно безрезультатно, сертифікат відкликається.
Як перевірити чистоту мотивації і наскільки точні можуть бути рекомендації?
Можу лиш сказати, що видо повинні бути достатньо чесним перед самим собою, адже програмування
— це складний виснажливий процес, а мислення — найвища форма управління організмом, тому
вади в його роботі можуть призвезти до непоправних наслідків.</span></p><p><span style="font-size:medium">Якщо крім програмування ви нічого не вмієте, то непогано було би розвинутив в собі первні
стратегії відступу: мінімальні техніки управління диханням та дієтою, легкий спорт без
фанатизму, трохи йоги, можливо активні види спорту. Якщо ви вважаєте, що у цілому
ви психічно стабільна людина, то пригутуйтеся до сюрпризів на шляху осягнення загадок
простоу без внутрішної чистоти намірів.</span></p><p><span style="font-size:medium">Моєю особистою мантрою, з якою я вивчаю програмування — це посвята резульатів своє
роботи людям та всім істотам, не нашкодивши нікому без виключення.
Взагалі вивчення програмування мало кому може зашкодити та може мати форму глибокого відлюдництва
святого монаха. Хоча є виключення, програмісти, а особливо гарні програмісти,
в своїй більшості не жорстокі істоти, і їх надмірна агресія і сердитість, направлена
в позитивному ключі інстроспекції є двигуном аутичного осягнення потаємностей професії програміста.</span></p><p><span style="font-size:medium">Взагалі, якшо мотивація алзмазної візниці привести усі істот до абсолютного просвітлення
знається вам занадто езотеричної, то хочи би стара етично норма інженерів минулого 
«не нашколь, а краще допоможи людям» є тим мінімомум, який необхідно перевіряти перед кожною сесією
програмування. Уявіть собі, що ви з рвінням лева кладете на вівтар просвітлення 10 років
самоосвіти в області програмування зі скрині свого життя для того аби принести користь людям та суспільству.
Без подібної мотивації вам просто не бути звідки черпати енергію для щоденних вправ в програмуванні та мисленні.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec6" <span style="font-size:medium">Всевідання як джерело натхнення</span>-->
<h3 id="sec6" class="subsection"><span style="font-size:medium">Всевідання як джерело натхнення</span></h3><!--SEC END --><p><span style="font-size:medium">Главная черта характера, которая необходима в человеке, чтобы стать топовым программистом – это предрасположенность к изучению и исследованию феноменов, их анализу, синтезу и абстракции. Это желание разобрать и исследовать игрушку должно так глубоко находиться в сознании, что кажется, будто ребенок уже рождается с этим даром быстро разбираться в феноменах при должной интенсивной нагрузке на нейросеточку. Другими словами – это хакерство, если вы любите исследовать системы, разбираться в программном коде, понимаете, как работают процессоры, знаете, как работает логика и математика, то вы уже можете стать топовым программистом. Желание построить максимально точную модель феномена должно быть гипертрофированным, оно должно быть незакрытым гештальтом, который не дает вам спать по ночам пока вы его не закроете. Именно эта фанатичная одержимость конвертируется в то, что будет дровами в нашем костре просветления на пути к всеведению в мире программирования. Откуда взялось всеведение? Это вторая сторона медали главного источника хакерского вдохновения. Если при локальном рассмотрении феноменов главной мыслью должно быть построить максимально точную модель феномена, то при фокусировке в бесконечность к краям горизонта, это желание проявляется в виде максимально быстрого познания вообще всех феноменов и их универсальные принципы устройства. Такой мета-хакерский трансцедентальный полу-фрический майндсет необходим для понимания того, насколько абстрактными и широкими могут быть вызовы на пути познания глубинных языков, на которых написана наша вселенная.
<br>
Так, как языки программирования используются во всех сферах человеческой деятельности, то топовый программист совершенно точно должен разбираться во всех доменных моделях, всех типах и всех математиках, которые возникают в разных языках программирования. Обычно, университетские 5 лет я бы рекомендовал провести как раз в охвате всех математик и всех видов языков программирования, перед тем как погрузиться в фундаментальную математику и системное программирование. Вообще хорошее современное образование уровня PhD автоматически подразумевает свободное владение языковым и математическим обеспечением в исследовании вселенной, так что ничего такого, что не требуют топовые университеты, курс топового программиста в этой части всеведения здесь не требует. Требуется полная автономность на уровне полетел в космос и восстановил все знания и навыки при необходимости в кратчайшие сроки путем легкого воспоминания.
<br>
Каждый раз поглощая какой-то пласт информации вы высвобождаете огромное пространство свободы, которое либо заполняется новыми неисследованными пластами, либо освобождается абсолютно, если вы уже все пласты поглотили. Но когда вы полностью исчерпаете всю карму, тогда буддахуд придет автоматически, так что это уже программа максимум. Ведь после того как вы изучили какой-то предмет и дали несколько мастер классов по нему, вы просто листаете все книги по нему, по которым учились и это все для вас даже не букварь, потому что букварь вы уже сами написали, это для вас просто шум деревьев в лесу. Вы полностью исчерпали этот предмет, стали мастером в нем, вы видите уже все сечения глобулярных фазовых пространств, имеете на руках несколько моделей и прототипов. Это состояние всеведения. Желание этого состояния – необходимый компонент топового программиста.
<br>
Если вы построили какое-то пространство феноменов наполнив их смыслом и остаетесь там в комфортной среде ограниченного знания, вы уже теряете топовую мотивацию как компонент всеведения. Не устремив свое мышление в бесконечность вы не сможете увидеть весь ландшафт и правильно расставить приоритеты в поглощении научных дисциплин, чтобы совершить «прыжки Тигра» между этими приоритетными реперными точками.
<br>
Только исследователи, которые преисполнены врождённого желания строить новые теории и языковые пространства наделены семенем творчества, которое ведет к топовой реализации. Междисциплинарный подход может появиться только в условиях широкого профиля. Никто никогда не ставил задачу составить курс для подготовки людей, которых можно было бы назвать культовыми хакерами, поэтому и требования к подготовке должны быть запредельными. Только олимпийское желание всеведения может реально приблизить вас к нему.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec7" <span style="font-size:medium">Мислення</span>-->
<h2 id="sec7" class="section"><span style="font-size:medium">Мислення</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec8" <span style="font-size:medium">Що таке мислення</span>-->
<h3 id="sec8" class="subsection"><span style="font-size:medium">Що таке мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тем как начинать процесс обучения неплохо было бы пару слов сказать об основном инструменте в процессе изучения – человеческом мышлении. Минуя физические стороны мышления сразу хочется поговорить о его когнитивных свойствах.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec9" <span style="font-size:medium">Характеристики чистого мислення</span>-->
<h3 id="sec9" class="subsection"><span style="font-size:medium">Характеристики чистого мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Первое и главное свойство мышления – это существенность – определяющая характеристика существа. Интегральная высшая форма, которая управляет всеми подсистемами и воспринимается существом, майндстримом или аватаром. В одном теле может жить несколько майндстримов, и некоторые из них вполне могут быть программистами! Если вы мыслите – вы существо.</span></p><p><span style="font-size:medium">Вторая когнитивная характеристика мышления, которую можно почувствовать в медитациях – это абсолютная сферическая открытость во всех направлениях и его безграничность. Такая характеристика мышления навевает мысли об изоморфизме мышления и пространства. С физической точки зрения, мышление – это сложная система квантовых полей, которые наслаиваются на квантовый, молекулярный уровень, нервную систему, поэтому долго доказывать не нужно, что мышление как квантово-механическая система, распространяется на всё пространство.</span></p><p><span style="font-size:medium">Условно существует два раздела высшей медитации, первый из которых называется разделом мышления, а второй разделом пространства. Первый раздел посвящен техникам работы с феноменами, аналитической медитации, работе с мышлением с точки зрения майндстрима, глазным упражнениям, развитию ощущения перспективы, работе с воображением, визуализациям. Второй раздел посвящен техникам работы с мышлением с точки зрения пространства, где мышление ассоциируется с пространством, в котором оно пребывает, неаналитической медитации устремлении в бесконечность, медитации отдохновения.</span></p><p><span style="font-size:medium">Третья когнитивная характеристика мышления, которую можно воспринять на опыте – это его необсуловленность. Чем выше уровень развития мышления, тем выше его воля к свободе и необсуловленность, к перепроверке, критическому мышлению и переоцениванию. В своей полной свободе мышление свободно выбирать направленность и интенсивность потока, без резких перепадов и гормональных фонов, двигаясь по оптимальной траектории взрослении плода мышления на пути к всеведению.</span></p><p><span style="font-size:medium">Четвертая характеристика мышления – это непрерывность. Любые попытки остановить мышление приводят в место самоосознавания как несущей частоте ощущения присутствия себя в этом мире, в медитации. Даже в процессе сна, мышление не спит, а переходит в другое агрегатное состояние, более разреженное, порой бесформенное, нечеткое, мерцающее. Полный контроль над непрерывностью мышления, от которой нельзя отказаться и которую нельзя прекратить – задача топового программиста на пути к освобождению ресурсов для изучения программирования. Чем больше точность дискретизации у этого контроля – тем лучше. Контроль над непрерывностью мышления называется точностью мышления.</span></p><p><span style="font-size:medium">Пятая характеристика мышления – взаимозависимость. Вы как мышление – это продукт абсорбции других фрагментов мышлений или просто феноменов, поэтому обусловлены этим наследием. Вырваться за пределы этой традиции и раскопать инсайты на пути эволюции своего мышления – истинная драгоценность как награда за труд обучения. Когда вы становитесь мастером, обусловленность пропадает, вы реструктурируете себя заново исходя уже из личного опыта, построенного на череде инсайтов, по которым вы прыгаете на пути к мастерству. И даже их вы потом сможете удалить и забыть из своего мышления оставив только память о том, как нужно сразу делать правильно, возможно и не вспомните даже, когда вас спросят, как это вы так быстро помудрели, а зачем.</span></p><p><span style="font-size:medium">Эти пять характеристик послужат вам подсказками в каком ключе нужно мыслить о своем мышлении (первая производная) как инструменте познания, возможно для существ с высокими способностями это сразу прояснит некоторые моменты. Любая неспособность наблюдать эти характеристики в практических медитация или размышлениях о своем мышлении, говорит о том, что их нужно развивать, либо заняться йогой, пойти к психологу, развеяться с друзьями, пойти в бар, сесть на таблетки, стакан, всё по желанию – главное, чтобы сработало! Чек лист прошли переходим к рекомендациям и индикаторам.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec10" <span style="font-size:medium">Коштовне намисто мислення</span>-->
<h3 id="sec10" class="subsection"><span style="font-size:medium">Коштовне намисто мислення</span></h3><!--SEC END --><p><span style="font-size:medium">В тибетской традиции существует шесть типов мышления или программ, которые считаются, что позитивно могут повлиять в целом на процесс изучения, размышления и медитации.</span></p><p><span style="font-size:medium">Щедрость в контексте мышления означает не жадничать в процессе изучения, не хвататься за все сразу, иметь методологию, с уважением относится к любой выбранной теме, раз она уже всплыла в медитации как гештальт, который все равно придется закрыть. Способность к репликации, преподаванию, возвратной контрибуции на пути поглощения информации – это щедрость мышления.</span></p><p><span style="font-size:medium">Дисциплина означает, что мышление должно придерживаться какого-то спортивного, желательно олимпийского режима, слишком хаотичные режимы мышления не будут способствовать обучению, поэтому приступать к эволюции своего мышления нужно, когда гормональный фон может оставаться ровным значительное время, это необходимо для глубоких медитаций, без которых невозможен прогресс.</span></p><p><span style="font-size:medium">Терпение – это способность переносить трудности в процессе обучения. Есть материал, который может не закрываться годами, но к нему, все равно придется возвращаться, ведь назад дороги нет, выбран путь топового программиста. На пути может быть слишком много инсайтов и слишком много воодушевления, которое может создавать гормональный фон, который не всегда можно контролировать, пересиживать на бенче такие периоды – это терпение.</span></p><p><span style="font-size:medium">Усердие – означает с неподдельным интересом изучать предметы, поэтому правильно их расположить очень важно. Возможно, именно для вас существует своя последовательность предметов, каждый из которых в отдельным момент времени вы будете изучать с максимальным усердием. С этим придется работаться, каждому индивидуально.</span></p><p><span style="font-size:medium">Фокусировка – фокусировка, или концентрация, или медитация, или шаматха – это основной режим работы программиста. Вот вы сели за комп, поставили чашку с кофе, протерли дисплей, всосались в пиксели, запустили шелл – вы сфокусированы на работе, это медитация.</span></p><p><span style="font-size:medium">Мудрость – это система накопленных инсайтов, которая формирует новые структуры мышления, новую его топологию. Эта система может переписывать старые неэффективные и невалидные структуры, над которыми мы смеемся повзрослев. Мышление мудрости – это мышление основанное исключительно на таких проверенных рафинированных структурах, которые положены в фундамент нашего существа.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec11" <span style="font-size:medium">Отрути мислення</span>-->
<h3 id="sec11" class="subsection"><span style="font-size:medium">Отрути мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Самые три неблагоприятные формы мышления по моей личной классификации.</span></p><p><span style="font-size:medium">Инертность мышления – это колесо медитации. Будучи раз запущена некоторая привычка, уходит в автоматический режим на подсознание – это инертность. Если бы не было инертности мышления мы бы не смогли учиться. Хотя это полезное свойство мышления, иногда бывает плохо, когда плохо – нужно отлавливать. Понятно, что дебажить свое мышление, которое спрятано в подсознании не учат в школах, придется работаться самому.</span></p><p><span style="font-size:medium">Лень. Слишком интенсивное мышление может перерасти в затяжную рекреационную прокрастинацию, которая сменится ленью. Наблюдение за видимым прогрессом необходимо, каким бы не был охуенный отдых нужно возвращаться за программирование, обновлять мотивацию, если нужно каждый день.</span></p><p><span style="font-size:medium">Безразличие. Корень всех ядов, жадности и прочего. Если вам все вдруг стало безразлично – это очень плохо, но не смертельно. Иногда может перерасти в экзистенциальный кризис, но мы же с вами уже договорились, что тело, йогу и таблетки и свое самочувствие вы берет на себя, с меня только рекомендации по процессу обучения. Запущенное безразличие – это тупость.</span></p><p><span style="font-size:medium">Ничего выходящего за перечисление доблестей хорошего успешного студента здесь нет. Как и в первом случае постоянно применяем технику размышления, изучения и медитации к этим видам мышления, так же как к основным характеристикам мышления. Постоянно проходим валидацию своего мышления в соответствии с выбранными индикаторами.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec12" <span style="font-size:medium">Простір професійного розвитку</span>-->
<h2 id="sec12" class="section"><span style="font-size:medium">Простір професійного розвитку</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec13" <span style="font-size:medium">Структура курсу</span>-->
<h3 id="sec13" class="subsection"><span style="font-size:medium">Структура курсу</span></h3><!--SEC END --><p><span style="font-size:medium">Не то, чтобы это была какая-то новость, уверен многие придерживаются такой карты топового программиста, но я возьму на себе смелость открыть это тайное знание. Начну описание курса с известной мемной картинки:</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec14" <span style="font-size:medium">Дракон</span>-->
<h3 id="sec14" class="subsection"><span style="font-size:medium">Дракон</span></h3><!--SEC END --><p><span style="font-size:medium">Единорогами называют тех программистов, которые одинаково хорошо владеют CSS скажем, а также могут полностью построить любой сложности тонкий или толстый клиент не ограничиваясь HTML5, но и переходя в SVG или WPF, или DirectX или OpenGL.</span></p><p><span style="font-size:medium">Фулстек программистами называют специалистов по построению информационных систем на границе с единорогами (которые обычно не занимаются процессиногом, инфраструктурой, сетями и защитой).</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec15" <span style="font-size:medium">Лямбдагарбха</span>-->
<h3 id="sec15" class="subsection"><span style="font-size:medium">Лямбдагарбха</span></h3><!--SEC END --><p><span style="font-size:medium">Следующий уровень — это платформообразующий уровень, который включет язык программирования, рантайм и аппаратуру. Обычно взрослые академические языки создаются сразу с рантаймом, поэтому назовем эту секцию уровень университетского профессора, а секцию рантайма (ОС) и аппаратура назовем предпринимательской, так как ОС обычно продают вместе с железом и все кто это пытался продвигать на рынок можно приравнять к бодхисаттвам. Последние известные лямбдагарбхи — это древние автора первых Лисп машин и XEROX PARC.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec16" <span style="font-size:medium">Гротендік</span>-->
<h3 id="sec16" class="subsection"><span style="font-size:medium">Гротендік</span></h3><!--SEC END --><p><span style="font-size:medium">На абсолютном уровне программисты (в том числе и топовые) являются математиками, поэтому тут можно отметить ядро которое было открыто Квилленом — модельные категории, в которых работали не только медалисты Филдса — Воеводский и сам Квиллен, но которые являются также основным инструментом современных теоретико-типовых математиков как Шульман. Предмет изучающий модельные категории Квиллен назвал гомотопической алгеброй, при помощи которой была построена не только модель алгебраической топологии самим Квилленом, но и А1-теория гомотопий Воеводского. Все это крышуется Гротендиком, как мультидисциплинарным программистом абсолютного уровня (топ-математиком).</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec17" <span style="font-size:medium">Будда</span>-->
<h3 id="sec17" class="subsection"><span style="font-size:medium">Будда</span></h3><!--SEC END --><p><span style="font-size:medium">Без лишней скромности, любой программист который смог не только представить, но и успеть порабать за жизнь на всех уровнях, может считать себя Буддой программирования, или как мы скромно называем таких пацанов — хуй с горы.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec18" <span style="font-size:medium">Теоретичні основи</span>-->
<h2 id="sec18" class="section"><span style="font-size:medium">Теоретичні основи</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec19" <span style="font-size:medium">Метафілософія</span>-->
<h3 id="sec19" class="subsection"><span style="font-size:medium">Метафілософія</span></h3><!--SEC END --><p><span style="font-size:medium">Дуже коротко про сучасні філософії. Якшо визначити філософію предикативно, то це
науа, що вивчає наступний перелік питань: 1) як жити добре в достатку та гедонізмі
максимально довго всім і не померти від воєн та метеоритів; 2) реальний всесвіт
та інші питання гнесеології; 3) свобода волі; 4) етика; 5) математика; 6) музика; 6) література,
— це все питання, або мовні набори та форми, що цікавлять сучасних філософів.</span></p><p><span style="font-size:medium">В этой заметке мы попытаемся построить формальную систему и на ее примере показать интерпретацию трех линий передачи современной философии: европейской или континентальной философии – школы, которая задала начало глобальной интерпретации мира и реконстуирования языков, в том числе и математики; восточной философии как пример особенной школы, на примере которой мы будем строить модель; и аналитической или англосаксонской философии, которая формализируется современной математикой.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec20" <span style="font-size:medium">Європейска філософія</span>-->
<h3 id="sec20" class="subsection"><span style="font-size:medium">Європейска філософія</span></h3><!--SEC END --><p><span style="font-size:medium">На наш взгляд главный вопрос европейской философии – это Good Life. Как жить, как жить хорошо самому, в социуме, какие цели могут стоять перед индивидом и видом, баланс этики и этика баланса. Европейская философия родила геометорию, психоанализ, научила людей не бояться свободы, трансформировать агрессию, быть более зрелым существом, и под венец своего развития поставила вопрос о языке и языковой игре, как основополагающем интрументе рефлексирущего сознания.
<br>
<br>
Язык перестал иметь почву, он стал просто узорами, семантика которых утрачена, философия стала формой литературного искусства.
<br>
<br>
Представители континентальной философии: Аристотель, Платон, Кант, Декарт, Ницше, Фройд, Юнг, Юм, Хайдегер, Адорно, Хабермас, Делёз.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec21" <span style="font-size:medium">Тибетська філософія</span>-->
<h3 id="sec21" class="subsection"><span style="font-size:medium">Тибетська філософія</span></h3><!--SEC END --><p><span style="font-size:medium">В восточной философии центральным вопросом является освобождение, себя и других, в первую очередь от различных форм страдания. Эта философия обладает четкой системой, которая неразрывно связана с телесными и умственными практиками, и выжила на протяжении тысячилетий в законсерированом горном плато. Здесь также поднимаются вопросы этики и свободы воли, но основной упор делается на интеллектуальные и неконцептуальные упражнения ведущие к непосредственному переживанию пространства.
<br>
<br>
Некоторые формулировки восточной философии, такие как недвойственность всех феноменов поддаются формализации в гомотопической теории типов (используя методы аналитической философии), что и побудило к дальнейшим исследованиям в области формализации эзотерических теорий.
<br>
<br>
Представители восточной (тибетской) философии: Атиша, Нагарджуна, Бхававивека, Камалашила, Шантаpакшита, Аpьядэва, Бyддхапалита, Чандpакиpти, Цонкапа, Мипам, Лонгченпа.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec22" <span style="font-size:medium">Аналітична філософія</span>-->
<h3 id="sec22" class="subsection"><span style="font-size:medium">Аналітична філософія</span></h3><!--SEC END --><p><span style="font-size:medium">Аналитическая философия рождена в математике, ранняя аналитическая философия начинается наверно с Лейбница, Ньютона и Эйлера. Поздняя аналитическая философия начинается С Фреге и по списку: Рассел, Уайтхед, Дедекинд, Пеано, Гильберт, Фон-Нейман, Карри, Акерманн, Карнап, Сколем, Пост, Гёдель, Черч, Бернье, Тюринг, Клини, Россер, Мак-Лейн, Ловир, Гротендик, Скотт, Джояль, Тернье, Мартин-Лёф, Милнер, Жирар, Плоткин, Рейнольдс, Бакус, Барр, Барендрехт, Лерье, Сили, Кокан, Хьюет, Ламбек, Воеводский, Эводи, Шульман, Шрайбер.
<br>
<br>
Если описать в двух словах главный вопрос аналитеческой философии — это язык пространства. Построение языка, который даст формальный фундамент не только математике и размышениям, но и самой философии.
<br>

</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec23" <span style="font-size:medium">Мова простору</span>-->
<h4 id="sec23" class="subsubsection"><span style="font-size:medium">Мова простору</span></h4><!--SEC END --><p><span style="font-size:medium">Формальные основания языка размышлений, математики (всей) и физики (вселенной).</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec24" <span style="font-size:medium">Мовні фреймворки</span>-->
<h4 id="sec24" class="subsubsection"><span style="font-size:medium">Мовні фреймворки</span></h4><!--SEC END --><p><span style="font-size:medium">Языковые фреймворки для менее формальных (с парадоксами) и нечетких (стохастических) систем.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec25" <span style="font-size:medium">Конкретні соціальні дифузійні моделі</span>-->
<h4 id="sec25" class="subsubsection"><span style="font-size:medium">Конкретні соціальні дифузійні моделі</span></h4><!--SEC END --><p><span style="font-size:medium">Прикладная философия. Использование языковых фреймворков для описания конкретных феноменов.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec26" <span style="font-size:medium">Таємні настанови</span>-->
<h2 id="sec26" class="section"><span style="font-size:medium">Таємні настанови</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec27" <span style="font-size:medium">Аспекти курсу</span>-->
<h3 id="sec27" class="subsection"><span style="font-size:medium">Аспекти курсу</span></h3><!--SEC END --><p><span style="font-size:medium">После того, как в первых двух главах мы рассказали о топовой мотивации и топовом мышлении, перейдем к топовому курсу топового программиста. Структура этого курса программирования возможно будет очень сильно отличаться от других подходов к обучению, но этот курс является курсом, который я пытался "увидеть" сквозь ретроспективу своего профессионального опыта, касающегося непосредственно программирования, того, как я вижу топовость этого процесса.
<br>
Перед тем как начать со структуры курса, я хочу показать основные индикаторы (аспекты курса), на которые стоит ориентироваться при выборе топовых направлений в программировании. Потому, что именно эти индикаторы и определяют те предметы и их последовательность в которой вы должны поглащать информацию, чтобы приблизиться к максимальной топовости.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec28" <span style="font-size:medium">Гранична точність</span>-->
<h3 id="sec28" class="subsection"><span style="font-size:medium">Гранична точність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная точность означает абсолютные вычисления. В эту вымышленную категорию я включаю все области программирования и математического моделирования, которые требуют абсолютной формальной точности: системы доказательства теорем, специализированные формальные верификаторы моделей, системы символьной алгебры, ситемы вычислительной гомологической алгебры, т.е. те системы моделирования, которые не только раскладывать саму систему до атомов, но еще и ближашую метамодель на уровень выше, которую тоже нужно формализировать, чтобы верифицировать сами модели. Сюда входят такие отрасли как процессоростроение (модел чекеры печатных плат, процессоров, специализированные языки программирования типа VHDL), языкостроение (системы типов, формальные языки программирования, языки общего назначения). Сюда также входят: любые формальные математические теории, формальные логики, язык кванторов Пи и Сигма.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec29" <span style="font-size:medium">Гранична оптимальність</span>-->
<h3 id="sec29" class="subsection"><span style="font-size:medium">Гранична оптимальність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная оптимальность означет минимальное количество усилий приложенное к достижению цели. Сюда входят дискретные задачи мини-макса, линейное программирование, симплекс методы, полиэдральное мномерное симплектическое программирование, методы оптимизаций. В физике это основной принцип вариационного исчисления, минимальные геодезические линии. Ваша система не только должна быть максимально точной, в апогее абсолютно точной, но и должна быть закодирована оптимальным образом, не содержать повторяющихся частей, занимать минимальный футпринт по ограниченному количеству памяти и вычислительных мощностей. Лучше, чтобы была теорема которая доказывает эту минимальность, как например черч-кодировка индуктивных типов как естественная кодировка любых структур в лямбда исчислении, оптимальные лямбда эвалуаторы и т.д. Предельная оптимальность означает также высший пилотаж в прототипировании и создании MVP эскизов.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec30" <span style="font-size:medium">Гранична складність</span>-->
<h3 id="sec30" class="subsection"><span style="font-size:medium">Гранична складність</span></h3><!--SEC END --><p><span style="font-size:medium">Предельная сложность означает дословно максимальную сложность системы с которой нужно работать. Если вдруг окажется, что вам сложности декартово-замкнутых категорий мало, всегда можно перейти в симметрические модальные категории в которых живут следующие языки программирования: квантовые языки программирования, конкруретные паралельные системы типа Erlang, системы линейных типов, языки для обработки тензоров. Также предельная сложность подразумевает наличие уже в системе предельной точности и предельной оптимальности, иначе без первого у вас будет просто неработающее говно, в отсуствии второго у вас будет миллионы строк дублирующего кода, которые не влияют на реальную сложность проекта. Если вы хотите увидеть реальную сложность посмотрите кубические доказательства из К-теории.</span></p><p><span style="font-size:medium">Это что касается более менее чистых тем из логики, дискретной математики, и программирования. В междисциплинарном подходе, если вы хотите стать не топовым программистом, а, например, топовым биофизиком, то список тем будет другой. Предельная точность там заменяется на математическую статистику и стохастическую физику, предельная оптимальность связана с топологией пространств, а предельная сложность выражается в объединений полей и, как пример, стандартной модели. Ну а в биофизике сложность увеличивается топологическими многообразиями нейросетей как иерархических процесов работающих со тензорными потоками. Гомотопическая теория типов как язык программирования инфитини топоса является в физике аналогом теории струн. Биофизика же представляет собой более диссипативные структуры, которые теряют границы точности, таким образом задача создания AI не в полной мере соотвествует абсолютной точности. Я бы сказал что AI это больше системная инженерия и прикладная область, в то время как абсолютная точность это больше сфера математического программирования. И даже машинное обучение при детальном рассмотрении сводится к статистической точности, прогнозируемой оптимальности и системной сложности.</span></p><p><span style="font-size:medium">Я, как сторонник абсолютной сложности, считаю, что любая современная PhD должна содержать междисциплинарный подход. В качестве необходимого минимума в международной научной практике предлагаю рассмотреть междисциплинарный подход, который базируется всего на двух особенных дисциплинах: УДК 51 (математика) и УДК 004 (программирование). В качестве особенных они выбраны потому, что любая другая дисциплина базируется на чистой математике, а для проведения любого моделирования (перепроверке теории), нужен фундаментальный курс программирования.</span></p><p><span style="font-size:medium">Интересно, что третий из этих индикаторов можно инвертировать и при этом оптимизационный вектор (максимальная точность, максимальная оптимальность и минимальная сложность) тоже окажется интересным объектом рассмотрения. В существе это требования выдвигаемые к библиотекам программного обеспечения: они должны быть максимально формальными с доказательствами свойств их моделей, должны быть оптимально смоделированы или обладающие оптимальным экстрактом в другие модели, но при этом также должны быть максимально простыми или минимально сложными в общей картине компонент. Философия N2O в точности соотвествует такому альтернативному оптимизационному вектору, но решая задачи технологических стеков нельзя стать топовым программистом, нужно увеличивать сложность, например в сторону сложных социо-информационных систем, как ERP системы управления предприятием, где десятки тысяч таблиц каждая по сотне полей привычная сложность для бизнес аналитиков, работающих с такими продуктами как SAP S/4.</span></p><p><span style="font-size:medium">Забавно, что в эзотерическом тибетском буддизме, эти три критерия применяются в наставлениях по визуализации в высших тантрах: вы должны максимально детально (до волос и фактуры тканей одежды — принцип максимальной точности) представить очень сложный объект (18-рукое божество в союзе с супругой, свитой и аттрибутами — принцип максимальной сложности) максимально быстро (желательно мгновенно — принцип оптимальности). Ученики, которые могут это делать не "на словах", а "на деле" — встраивая картинку силой мысли и воображения даже не на сечатку глаза, а прямо на кору головного мозга, выжигая изображение в своем мышлении на простыне воображаемой вселенной — считаются топовыми медитаторами. Для наглядного примера хочу показать приблизительное качество визуализации удерживаемое в пространстве своего мышления, которого может добиться средний по способностям европеоид-медитатор за 3 года упорной практики:</span></p><p><span style="font-size:medium">Наверно поэтому до сих пор не существует ни одного просветленного европейца! Эта картинка также наглядная демонстрации того, что вы можете достичь за 3 года обучения (думаю, что у отдела PhD ребят из NASA, подготовка к рендеру этой картинки заняла три года как раз).</span></p><span style="font-size:medium">
</span><!--TOC section id="sec31" <span style="font-size:medium">Практика</span>-->
<h2 id="sec31" class="section"><span style="font-size:medium">Практика</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec32" <span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span>-->
<h3 id="sec32" class="subsection"><span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span></h3><!--SEC END --><p><span style="font-size:medium">Рано или поздно, все кто занимается йогой ума при должном успехе, так или иначе переходят к освоению йоги тела, которое является продолжением ума. Секрет успешной практики в том, что как и йога ума, йога тела требует еще более острой осознанности. Под йогой тела мы будем понимать здесь такого рода энергии, которые вы можете пережить только в режиме эксремального спорта, там где ревард очень высокий. В спорте это X-спорт, в сексе это BSDM, подходит все дисциплины, где есть стоп-слово, за границей которого сразу наступает терминация существа.
<br>
<br>
Почему йога тела должна идти обязательно после укрпления в практике йоги ума? На это есть несколько причин. Считается, что основа устойчивого и взрослого мышления это правильное мировозрение, которое должно формироваться существом в период изучения философских дисциплин, нерешенных вопросов трансгуманизма и других базовых принципов. Придерживаясь внесектарного стиля, самые базовые принципы мировозрения топового программисты были зацементированы в первом выпуске.
<br>
<br>
Положив неправильный майндсет в основание Изучения, Размышления и Медитации вы создате брешь, через которую в критический момент вашей жизни при встрече с Буддой ваше видения мира разрушиться как детский замок из песка после прилива. Для тренировки ума алмазной крепкости и остроты и предназначены практики формирования правильно взгляда на объект ислледования свой собственный ум, за предалами котого не существуют никакие феномены.
<br>
<br>
Как и йога ума, йога тела предусматривает два режима исследования: пандита стайл (изучение теории) и йога стайл (практика). Усвоившись и укрепившись в своем сознании, существо движущиеся главным принципом будда-таковости, стремлением к всезнанию и полной реализации, зерном которого является познание феноменов, начинает выходить за рамки ментальных феноменов и начинает осознавать себя и свое тело как часть мышления, и естественным образом начинает экспериментировать с телом, расширяя свой фронтир восприятия.
<br>
<br>
Главный критерий который показывает можно ли вам переходить к спорту это полный контроль над дофаминовой и эпинифриновой системой. Некоторые слишком впечатлительные спортсмены используют THC для суппрессии дофамина и более мягкой йога-сессии. Обычно рекомендуется входить в спорт в 40 лет, потому что в 25 и несколько лет после нужно посвятить математике и философии, ведь лучшего времени уже не будет и вернуть его будет непросто! А в 40 уже дофаминовый фон сам по себе исчезнет и останется только чистый ум и террейн. Это вторая безжалостная причина по которой спорт лучше отложить до adult возраста. Есть и другая сторона медали: раны после 40 заживают хуже, поэтому и ставки и острота и ревард в таком случае выше. Идеально это имея острый ум не совершать вообще серьезных ошибок на пути спорта. Неидеальные случаи решаются имплантацией титановых пластин.
<br>
<br>
Коcвенный критерий это когда вы достигли уровня непосредственного переживания отождествления языка пространства (выпуск Х), карты местности (выпуск 4) и своего мышления (выпуск 2), в таком случае выход из локальной самсары в виде темницы ума будет знаменовать выход в реальный мир на планету Земля. Алегория которая мне видится здесь такая: мать отправляют своего сына в университет передав ему все необходимые знания, которые помогут ему жить дальше автономно.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec33" <span style="font-size:medium">Программування та спорт</span>-->
<h3 id="sec33" class="subsection"><span style="font-size:medium">Программування та спорт</span></h3><!--SEC END --><p><span style="font-size:medium">Гуру в спорте найти так же тяжело как и гуру в программировании. В светской жизни гуру спорта работают олимпийскими чемпионами или чемпионами в дисциплинах которые к этому приравниваются. Само их существование уже является учением. Разбирая до мельчайших деталей покадрово трейсы топ-спорсменов на youtube вы получаете алмазные знания виртуоза-ньюскулера методично оттачивая технику имея образец для верификации. Гуру спорта поменьшего калибра будут работать инструкторами на ближайшем спортивном курорте, рекламировать газировку и эквипмент или предлагать вам туры по национальным заповедникам.
<br>
<br>
Не все это говорят прямо, но в спорте важными являются картинки которые проходят через вашу сеточку и все органы чувств, поэтому ценятся картинки естественного ландшафта Земли, чтобы освободить свое мышление уже за границами тела, охватив своим мышлением всю планету и ее феномены, главный из которых гравитация, таким образом став воистину космическим ребёнком планетарного масштаба.
<br>
<br>
Однако в разговорах с локальными спортивными гуру вы получите максимум репрессивные монотонные лекции о вреде курения на Джомолунгме, ужасные команды инструкторов-обывателей, толпы туристов на своём пути. Взрослый человек овладевший йогой ума сам должен стать себе гуру и планировать каждую вылазку на встречу с гравитацией как проект с многими параметрами-переменными, от проработки которого зависит ваша жизнь.
<br>
<br>
Все эти гуру будуть говорить вам, что только они понимают суть вещей, познали природу в не-мышлении, а у вас большой груз йоги-ума, который мешает вам достигать результатов, заморочки, излишняя концептуализация, чрезмерная начитанность, и другие смертные грехи. Тут действует такое же правило как и в детском саде, школе или университете "умных не любят", поэтому имейте это ввиду собравшись поговорить по душам за костром с очередным спортивным гуру.
<br>
<br>
Разумный и рациональный человек всегда выберет более редкую и филигранную йогу ума вместо йоги тела, которой владеет гораздое большее количество существ. Ведь получить алмаз ума гораздо сложнее чем алмаз тела, поэтому партнеры по спорту и даже локальные гуру, будут готовы в прямом смысле подсознательно вас убить на склоне, тут тоже нужен глаз да глаз.
<br>
<br>
В тибетском буддизме аналогом спорта является тайное посвящение каналов, ветров и сфер структуры вашей алмазной сети. Все эти йоги выполняются в паре с опорой на партнера и добраться до этого уровня будет затруднительно обывателю. Тем более, что таких гуру еще меньше чем спортивных.
<br>

</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec34" <span style="font-size:medium">Баланс</span>-->
<h3 id="sec34" class="subsection"><span style="font-size:medium">Баланс</span></h3><!--SEC END --><p><span style="font-size:medium">Главный наркотик для йоги-ума и йоги-тела это сахар. Все спорсмены как минимум висят на кока-коле, ред-булле, гелях, стимуляторах. Баланс этих веществ и правильное питание ключ к быстрому восстановлению после спортивных сессий, которые так или иначе нужно будет залечивать перед полноценными сессиями йоги ума. Игнорировать вспомонательные вещества на пути спорта глубо, но и злоупотреблять не стоит. Главный критерий, непрерывность, вы должны планировать ваше путешествие таким образом, чтобы ваше сознание не пошатнулось от внезапного изменения гормонального фона, дефицита того или иного топливного элемента.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec35" <span style="font-size:medium">Посвята всім святим програмістам</span>-->
<h2 id="sec35" class="section"><span style="font-size:medium">Посвята всім святим програмістам</span></h2><!--SEC END --><!--CUT END -->
<!--HTMLFOOT-->
<!--ENDHTML-->
</body>
</html>
