<!DOCTYPE html>
<html lang="en">
<head>


  <meta name="Author" content="5HT">
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="super-style.css" type="text/css" rel="stylesheet">
  <script src="super-code.js"></script>

  <title>Ідея Нації
</title>
</head>
<body >
<!--HEVEA command line is: hevea index.tex -o index.htm -->
<!--CUT STYLE article--><!--HTMLHEAD-->
<div id="navcontainer" style="margin-top:-8px;margin-left:-8px;margin-right:-8px;border-bottom:1px solid;"><ul id="nav"><li><a href="#">Navigation</a><ul><li><a href="../../../index.html">axiosis</a></li><li><a href="../../index.htm">books</a></li><li><a href="../index.htm">top</a></li></ul></li><li><a href="#">Download</a><ul><li><a href="index.htm">HTML</a></li><li><a href="index.pdf">PDF</a></li></ul></li><li><a href="#">Translations</a><ul><li><a href="#">Namkhai Lhamo</a></li></ul></li></ul><div style="clear:both;"></div></div><!--ENDHTML-->
<!--CUT DEF section 1 --><span style="font-size:x-large">
</span><!--TOC section id="sec1" <span style="font-size:x-large">
<br>
Топ програміст</span>-->
<h2 id="sec1" class="section"><span style="font-size:x-large">
<br>
Топ програміст</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC section id="sec2" <span style="font-size:medium">Поклоніння простору</span>-->
<h2 id="sec2" class="section"><span style="font-size:medium">Поклоніння простору</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec3" <span style="font-size:medium">Топовий програміст</span>-->
<h3 id="sec3" class="subsection"><span style="font-size:medium">Топовий програміст</span></h3><!--SEC END --><p><span style="font-size:medium">Якщо мої передплатники і просять про якусь масштабну контрибуцію,
то це монографію на тему «як стати топовим програмістом».
Хоча таке формулювання інфантильне, воно досить добре
відображає сутність запитуваного: детальний розгляд професії
програміста, стратегію вивчення предмета виходячи з особистого
досвіду, розбавлений автентичною філософією.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec4" <span style="font-size:medium">Висловлювання нескіченної поваги</span>-->
<h3 id="sec4" class="subsection"><span style="font-size:medium">Висловлювання нескіченної поваги</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тим як розпочати розповідь про професію програміста
насамперед хочеться висловити пошану предмету вивчення та
практики програмування, а саме формальним математичним
обчислювальним побудовам, у яких можливе програмування
в принципі. В останні роки стало зрозуміло, що простір
цих побудов настільки глибокий, що може поглинути не
тільки всі дискретні програми всіх формальних граматик,
а й континуальну математику, у якій робота з простором
йде на іншому, більш фундаментальному рівні. Тому без зайвого
перебільшення можна сказати, що саме простір народжує
мовну групу мов, які є первісною матрицю всіх без винятку
мов програмування.</span></p><p><span style="font-size:medium">Принцип глибокої поваги до предмету, який
майстер повинен реалізувати є одним із секретних ключів
східної філософії. Позаяк програмування народжується з
простору феноменологічних побудов, що ведуть до абстрактної
класифікації просторів та логік з ними пов’язаних, то утримання
у фокусі мети вивчення простору та програмування як
практичного людського процесу з цим пов’язаним є
головним завданням на шляху вивчення. Тому, без недооцінки та
зайвого перебільшення можна сказати, що простягання або поклоніння,
як прояв поваги до самого простору, як об’єкту вивчення,
виглядає для мене логічним. Я простягаюся перед простором.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec5" <span style="font-size:medium">Перевірка мотивації</span>-->
<h3 id="sec5" class="subsection"><span style="font-size:medium">Перевірка мотивації</span></h3><!--SEC END --><p><span style="font-size:medium">Важливою характеристикою, яка, хочете вірте, а хочете ні,
впливає на процес вивчення мистецтва програмування, є чистота мотивації.
Якщо розглянути граничный популярний споживацький приклад, то він буде виглядати так:
ваша мотивація полягає у збільшенні своїх навичок програміста для
досягнення матеріальних благ і підвищення конкурентоспроможності
на ринку праці. Повна нісенітниця, така мотивація вприває на критерії
вибору об’єктів вивчення і це може завести вас у ситуацію, коли вам
50 років і ви пишете на Core Java для якось швейцарского банку.
Очевидно, що люди, які просили у мене цей текст, не очікують чогось подібного.</span></p><p><span style="font-size:medium">Свої ілюзії про легкість цього шляху можна відразу відкинути.
Цей шлях по-самурайськи скдадний і на нім сходили з розуму не тільки
випускники прикладної математики, немало людей перегоріло на
підприємствах від перенавантаження та неконтрольованості інформації.
Тому 10 років ув’язнення з постійним виділеним
каналом в інтернет на повному зовнішньому забезпеченні —
ідеальний ресурс, який я рекомендував би виділити для успішної
підготовки на майстра програмування.</span></p><p><span style="font-size:medium">Чому такий великий термін буде пояснено в наступних частинах.
10 років цілком адекватний інтервал навчання для лікаря, то чому для програміста повинно бути менше.
Кількість мов якими кваліфікований програміст володіє на практиці може сягати тисяч,
за кожною з них стоїть теорія, своя логіка і своя математика нею породжена.
Це не просто латина, есперанто та пару мов романо-германської групи.
Половину цього часу можна проводити в реальних проектах, типу інтернатури,
але мов і матеріалів так багато, що для топового програміста 10 років можна виділити тільки на теорію.</span></p><p><span style="font-size:medium">Так, можна і в 50 років влаштуватися на галєру «цифровим сантехніком»,
але це теж ніяк не попадає під курс топового програміста, який повинен
покривати широкий діапазон дисциплін: від створення процесорів, асемблерів,
компіляторів, операційних систем, систем управління базами даних, мережевих протоколів,
сервісів, шин та додатків до теоретико-типових верифікаторів математичних
моделей та теорем, сертифікованих компіляторів, систем доведення теорем.</span></p><p><span style="font-size:medium">Мотивація настільки важлива, що без правильної мотивації висувати будь-які претензії
про марно втрачені 10 років життя абсолютно безрезультатно, сертифікат відкликається.
Як перевірити чистоту мотивації і наскільки точні можуть бути рекомендації?
Можу лиш сказати, що видо повинні бути достатньо чесним перед самим собою, адже програмування
— це складний виснажливий процес, а мислення — найвища форма управління організмом, тому
вади в його роботі можуть призвезти до непоправних наслідків.</span></p><p><span style="font-size:medium">Якщо крім програмування ви нічого не вмієте, то непогано було би розвинутив в собі первні
стратегії відступу: мінімальні техніки управління диханням та дієтою, легкий спорт без
фанатизму, трохи йоги, можливо активні види спорту. Якщо ви вважаєте, що у цілому
ви психічно стабільна людина, то пригутуйтеся до сюрпризів на шляху осягнення загадок
простору без внутрішної чистоти намірів.</span></p><p><span style="font-size:medium">Моєю особистою мантрою, з якою я вивчаю програмування — це посвята резульатів своє
роботи людям та всім істотам, не нашкодивши нікому без виключення.
Взагалі вивчення програмування мало кому може зашкодити та може мати форму глибокого відлюдництва
святого монаха. Хоча є виключення, програмісти, а особливо гарні програмісти,
в своїй більшості не жорстокі істоти, і їх надмірна агресія і сердитість, направлена
в позитивному ключі інстроспекції є двигуном аутичного осягнення потаємностей професії програміста.</span></p><p><span style="font-size:medium">Взагалі, якшо мотивація алзмазної візниці привести усі істот до абсолютного просвітлення
знається вам занадто езотеричної, то хочи би стара етично норма інженерів минулого 
«не нашколь, а краще допоможи людям» є тим мінімомум, який необхідно перевіряти перед кожною сесією
програмування. Уявіть собі, що ви з рвінням лева кладете на вівтар просвітлення 10 років
самоосвіти в області програмування зі скрині свого життя для того аби принести користь людям та суспільству.
Без подібної мотивації вам просто не бути звідки черпати енергію для щоденних вправ в програмуванні та мисленні.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec6" <span style="font-size:medium">Всевідання як джерело натхнення</span>-->
<h3 id="sec6" class="subsection"><span style="font-size:medium">Всевідання як джерело натхнення</span></h3><!--SEC END --><p><span style="font-size:medium">Головна риса характеру, яка необхідна в людині, щоб стати
топовим програмістом — це схильність до вивчення та дослідження феноменів,
їх аналізу, синтезу та абстракції. Це бажання розібрати і
досліджувати іграшку має так глибоко перебувати у свідомості,
що здається, ніби дитина вже народжується з цим даром і
швидко розбиратися у феноменах за належного інтенсивного
навантаження на нейросіточку. Іншими словами — це хакерство,
якщо ви любите досліджувати системи, розбиратися в програмному
коді, розумієте, як працюють процесори, знаєте, як працює
логіка та математика, то ви вже можете стати топовим програмістом.
Бажання побудувати максимально точну модель феномена має
бути гіпертрофованим, воно має бути незакритим гештальтом,
який не дає вам спати ночами, поки ви його не закриєте.
Саме ця фанатична одержимість конвертується в те, що буде
дровами у нашому вогнищі просвітлення на шляху до всезнавства
у світі програмування. Звідки взялося всезнання?
Це друга сторона медалі головного джерела натхнення хакера.
Якщо при локальному розгляді феноменів головною думкою має
бути побудувати максимально точну модель феномену, то при
фокусуванні в нескінченність до країв горизонту, це бажання
проявляється у вигляді максимально швидкого пізнання всіх
феноменів і їх універсальні принципи пристрою. Такий
мета-хакерський трансцедентальний напів-фрічний майндсет
необхідний для розуміння того, наскільки абстрактними і
широкими можуть бути виклики на шляху пізнання глибинних
мов, якими написано наш всесвіт.</span></p><p><span style="font-size:medium">Так, як мови програмування використовуються у всіх сферах
людської діяльності, то топовий програміст абсолютно точно
повинен розбиратися у всіх доменних моделях, усіх типах та
всіх математиках, які виникають у різних мовах програмування.
Зазвичай, університетські 5 років я б рекомендував провести
якраз у охопленні всіх математик та всіх видів мов програмування,
перед тим як поринути у фундаментальну математику та системне
програмування. Взагалі хороша сучасна освіта рівня PhD автоматично
має на увазі вільне володіння мовним та математичним
забезпеченням у дослідженні всесвіту, так що нічого
такого, що не вимагають топові університети, курс
топового програміста в цій частині всезнавства тут не вимагає.
Потрібна повна автономність на рівні полетів у космос і
відновив усі знання та навички за потреби у найкоротші
терміни шляхом легкого спогаду.</span></p><p><span style="font-size:medium">Щоразу поглинаючи якийсь пласт інформації ви вивільняєте
величезний простір свободи, який або заповнюється новими
недослідженими пластами, або звільняється абсолютно, якщо
вже всі пласти поглинули. Але коли ви повністю вичерпаєте
всю карму, тоді буддахуд прийде автоматично, тож це вже
програма максимум. Адже після того, як ви вивчили якийсь
предмет і дали кілька майстер класів по ньому, ви просто
гортаєте всі книги по ньому, за якими навчалися і це все
для вас навіть не буквар, тому що буквар ви вже самі написали,
це для вас просто шум дерев у лісі. Ви повністю вичерпали цей
предмет, стали майстром у ньому, ви вже бачите всі перерізи
глобулярних фазових просторів, маєте на руках кілька моделей
і прототипів. Це стан всезнавства. Бажання цього стану —
необхідний компонент топового програміста.</span></p><p><span style="font-size:medium">Якщо ви побудували якийсь простір феноменів, наповнивши
їх змістом і залишаючись там у комфортному середовищі
обмеженого знання, ви вже втрачаєте топову мотивацію
як компонент всезнання. Не спрямувавши своє мислення
в нескінченність, ви не зможете побачити весь ландшафт
і правильно розставити пріоритети в поглинанні наукових
дисциплін, щоб здійснити &lt;&lt;стрибки Тигра&gt;&gt; між цими
пріоритетними реперними точками.</span></p><p><span style="font-size:medium">Тільки дослідники, які сповнені вродженого бажання будувати
нові теорії та мовні простори, наділені насінням творчості,
що веде до топової реалізації. Міждисциплінарний підхід може
виникнути лише за умов широкого профілю. Ніхто ніколи не
ставив завдання скласти курс для підготовки людей, яких
можна було б назвати культовими хакерами, тому й вимоги
до підготовки мають бути позамежними. Тільки олімпійське
бажання всезнання може реально наблизити вас до нього.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec7" <span style="font-size:medium">Мислення</span>-->
<h2 id="sec7" class="section"><span style="font-size:medium">Мислення</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec8" <span style="font-size:medium">Що таке мислення</span>-->
<h3 id="sec8" class="subsection"><span style="font-size:medium">Що таке мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Перед тим як розпочинати процес навчання непогано було
б кілька слів сказати про основний інструмент у процесі
вивчення — людське мислення. Минаючи фізичні сторони
мислення відразу хочеться поговорити про його когнітивні властивості.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec9" <span style="font-size:medium">Характеристики чистого мислення</span>-->
<h3 id="sec9" class="subsection"><span style="font-size:medium">Характеристики чистого мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Перша і головна властивість мислення — це істотність —
визначальна характеристика істоти. Інтегральна вища форма,
яка керує всіма підсистемами та сприймається істотою,
майндстрімом або аватаром. В одному тілі може жити
кілька майндстрімів, і деякі з них можуть бути програмістами!
Якщо ви думаєте — ви є істотою.</span></p><p><span style="font-size:medium">Друга когнітивна характеристика мислення, яку можна
відчути у медитаціях — це абсолютна сферична відкритість
у всіх напрямках та її безмежність. Така характеристика
мислення навіває думки про ізоморфізм мислення та простору.
З фізичної точки зору, мислення — це складна система квантових
полів, які нашаровуються на квантовий, молекулярний рівень,
нервову систему, тому довго доводити не потрібно, що
мислення як квантово-механічна система поширюється на весь простір.</span></p><p><span style="font-size:medium">Умовно існує два розділи вищої медитації, перший із яких
називається розділом мислення, а другий розділом простору.
Перший розділ присвячений технікам роботи з феноменами,
аналітичної медитації, роботі з мисленням з погляду
майндстріму, очним вправам, розвитку відчуття перспективи,
роботи з уявою, візуалізаціям. Другий розділ присвячений
технікам роботи з мисленням з погляду простору, де мислення
асоціюється з простором, в якому воно перебуває,
неаналітичної медитації, прагнення до нескінченності,
медитації відпочинку.</span></p><p><span style="font-size:medium">Третя когнітивна характеристика мислення, яку можна
сприйняти на досвіді, — це його необумовленість.
Чим вищий рівень розвитку мислення, тим вища його
воля до свободи і необумовленість, до перевірки,
критичного мислення і переоцінювання. У своїй повній
свободі мислення вільно обирає спрямованість і інтенсивність
потоку, без різких перепадів і гормональних фонів,
рухаючись оптимальною траєкторією дорослішання плоду
мислення на шляху до всезнавства.</span></p><p><span style="font-size:medium">Четверта характеристика мислення – це безперервність.
Будь-які спроби зупинити мислення приводять у місце
самоусвідомлення як несучу частоту відчуття присутності
себе в цьому світі, в медитації. Навіть у процесі сну,
мислення не спить, а перетворюється на інший агрегатний
стан, більш розріджене, часом безформне, нечітке,
мерехтливе. Повний контроль над безперервністю мислення,
від якої не можна відмовитись і яку не можна припинити —
завдання топового програміста на шляху до звільнення
ресурсів для вивчення програмування. Чим більша точність
дискретизації цього контролю – тим краще. Контроль за
безперервністю мислення називається точністю мислення.</span></p><p><span style="font-size:medium">П’ята характеристика мислення – взаємозалежність. Ви
як мислення — це продукт абсорбції інших фрагментів
мислень чи просто феноменів, тому обумовлені цією спадщиною.
Вирватися за межі цієї традиції та розкопати інсайти на шляху
еволюції свого мислення – справжня коштовність як нагорода за
працю навчання. Коли ви стаєте майстром, обумовленість зникає,
ви реструктуруєте себе наново виходячи вже з особистого досвіду,
побудованого на низці інсайтів, за якими ви стрибаєте на шляху
до майстерності. І навіть їх ви потім зможете видалити і забути
зі свого мислення залишивши тільки пам’ять про те, як потрібно
одразу робити правильно, можливо і не згадайте навіть,
коли вас спитають, як це ви так швидко помудріли, а навіщо.</span></p><p><span style="font-size:medium">Ці п’ять характеристик послужать вам підказками у якому
ключі потрібно думати про своє мислення (перша похідна)
як інструмент пізнання, можливо для істот з високими
здібностями це одразу прояснить деякі моменти. Будь-яка
нездатність спостерігати ці характеристики в практичних
медитаціях або роздумах про своє мислення, говорить про
те, що їх потрібно розвивати, або зайнятися йогою, піти
до психолога, розвіятися з друзями, піти в бар, сісти
на таблетки, склянку, все за бажанням — головне щоб
спрацювало! Чек лист пройшли переходимо до рекомендацій та індикатора</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec10" <span style="font-size:medium">Коштовне намисто мислення</span>-->
<h3 id="sec10" class="subsection"><span style="font-size:medium">Коштовне намисто мислення</span></h3><!--SEC END --><p><span style="font-size:medium">У традиції Тибету існує шість типів мислення або програм, які вважаються,
позитивно можуть вплинути в цілому на процес вивчення, роздуми і медитації.</span></p><p><span style="font-size:medium">Щедрість у контексті мислення означає не скупитися в процесі вивчення,
не хапатися за все одразу, мати методологію, з повагою ставиться до
будь-якої обраної теми, раз вона вже спливла в медитації як комлекс,
який все одно доведеться закрити (пізнати). Здатність до реплікації, викладання,
зворотної контрибуції по дорозі поглинання інформації — це щедрість мислення.</span></p><p><span style="font-size:medium">Дисципліна означає, що мислення має дотримуватися якогось спортивного,
бажано олімпійського режиму, надто хаотичні режими мислення не
сприятимуть навчанню, тому приступати до еволюції свого мислення
потрібно, коли гормональне тло може залишатися рівним значний час,
це необхідно для глибоких медитацій, без яких неможливий прогрес.</span></p><p><span style="font-size:medium">Терпіння – це здатність переносити проблеми у процесі навчання.
Є матеріал, який може не закриватися роками, але до нього все
одно доведеться повертатися, адже назад дороги немає, обрано
шлях топового програміста. На шляху може бути занадто багато
інсайтів і надто багато наснаги, яке може створювати гормональне
тло, яке не завжди можна контролювати, пересиджувати на бенчі
такі періоди — це терпіння.</span></p><p><span style="font-size:medium">Старанність — означає з непідробним інтересом вивчати предмети,
тому правильно їх розмістити дуже важливо. Можливо, саме для вас
існує своя послідовність предметів, кожен з яких в окремий момент
часу ви вивчатимете з максимальною старанністю. Із цим доведеться
працювати, кожному індивідуально.</span></p><p><span style="font-size:medium">Фокусування — фокусування, чи концентрація, чи медитація,
чи шаматха — це основний режим роботи програміста. Ось ви
сіли за комп’ютер, поставили чашку з кавою, протерли дисплей,
всмокталися в пікселі, запустили шелл — ви сфокусовані на
роботі, це медитація.</span></p><p><span style="font-size:medium">Мудрість — це система накопичених інсайтів, що формує нові
структури мислення, нову його топологію. Ця система може
переписувати старі неефективні та невалідні структури,
з яких ми сміємося подорослішавши. Мислення мудрості — це
мислення, засноване виключно на таких перевірених рафінованих
структурах, які покладені в фундамент нашої істоти.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec11" <span style="font-size:medium">Отрути мислення</span>-->
<h3 id="sec11" class="subsection"><span style="font-size:medium">Отрути мислення</span></h3><!--SEC END --><p><span style="font-size:medium">Три найбільш несприятливі форми мислення з моєї особистої класифікації.</span></p><p><span style="font-size:medium">Інертність мислення – це колесо медитації. Будучи вкотре
запущена деяка звичка, йде у автоматичний режим на
підсвідомість — це інертність. Якби не було інертності
мислення, ми б не змогли вчитися. Хоча це корисна властивість
мислення, іноді буває погано, коли погано — потрібно
відловлювати. Зрозуміло, що бешкетувати своє мислення,
яке заховано в підсвідомості не вчать у школах, доведеться працювати самому.</span></p><p><span style="font-size:medium">Лінощі. Занадто інтенсивне мислення може перерости в затяжну
рекреаційну прокрастинацію, яка зміниться лінощами.
Спостереження за видимим прогресом необхідно, яким би був
охуенный відпочинок треба повертатися за програмування,
оновлювати мотивацію, якщо потрібно щодня.</span></p><p><span style="font-size:medium">Байдужість. Корінь усіх отрут, жадібності та іншого. Якщо
вам все раптом стало байдуже, це дуже погано, але не смертельно.
Іноді може перерости в екзистенційну кризу, але ж ми з вами вже
домовилися, що тіло, йогу і таблетки і своє самопочуття ви
берете на себе, з мене тільки рекомендації щодо процесу
навчання. Занедбана байдужість — це тупість.</span></p><p><span style="font-size:medium">Нічого хорошого успішного студента, який виходить за
перерахування чеснот, тут немає. Як і першому випадку
постійно застосовуємо техніку роздуми, вивчення та
медитації до цих видів мислення, як і до основних характеристик
мислення. Постійно валідуємо своє мислення відповідно
до індикаторів.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec12" <span style="font-size:medium">Ядро логіки</span>-->
<h3 id="sec12" class="subsection"><span style="font-size:medium">Ядро логіки</span></h3><!--SEC END --><p><span style="font-size:medium">Є тільки три способами якими жива істота може помилятися в рамках
логіки своєї людської мови. Перше — це побудова неправильних
функцій як елементів певних функціональних алгебріїчних синантур.
Друга — це недоведене конструктивне існування певного об’єкту,
моделі, системи, тощо, з певними властивостями. І третій — це
неправильне порівняння, підміна понять, некоректна аналогія,
відсусть доведеного ізоморфізму, який може мати багато вимірів,
особливо в алгебрїчній геометрії. Багатавимірність, або параметричність
кванторів існування та узагальнення моделюється телекскопічність їх
контекстів.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec13" <span style="font-size:medium">Квантор узагальнення</span>-->
<h4 id="sec13" class="subsubsection"><span style="font-size:medium">Квантор узагальнення</span></h4><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsubsection id="sec14" <span style="font-size:medium">Квантор існування</span>-->
<h4 id="sec14" class="subsubsection"><span style="font-size:medium">Квантор існування</span></h4><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsubsection id="sec15" <span style="font-size:medium">Багатовимірний ізоморфізм</span>-->
<h4 id="sec15" class="subsubsection"><span style="font-size:medium">Багатовимірний ізоморфізм</span></h4><!--SEC END --><span style="font-size:medium">
</span><!--TOC section id="sec16" <span style="font-size:medium">Простір професійного розвитку</span>-->
<h2 id="sec16" class="section"><span style="font-size:medium">Простір професійного розвитку</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec17" <span style="font-size:medium">Структура курсу</span>-->
<h3 id="sec17" class="subsection"><span style="font-size:medium">Структура курсу</span></h3><!--SEC END --><p><span style="font-size:medium">Не те, щоб це була якась новина, впевнені багато
хто дотримується такої карти топового програміста,
але я візьму на собі сміливість відкрити це таємне
знання. Почну опис курсу з відомої мемної картинки.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec18" <span style="font-size:medium">Дракон</span>-->
<h3 id="sec18" class="subsection"><span style="font-size:medium">Дракон</span></h3><!--SEC END --><p><span style="font-size:medium">Юнікорнами називають тих програмістів, які однаково
добре володіють CSS скажімо, а також можуть повністю
побудувати будь-якої складності тонкий чи товстий
клієнт не обмежуючись HTML5, а й переходячи у SVG
чи WPF, чи DirectX чи OpenGL.</span></p><p><span style="font-size:medium">Фулстек програмістами називають фахівців із
побудови інформаційних систем на кордоні з
єдинорогами (які зазвичай не займаються процесиногом,
інфраструктурою, мережами та захистом).</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index001.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 1: Дракон</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><p><span style="font-size:medium">Знайти програміста який може дати гарантію контролю якості
на всьому спектри цих спеціалацій побідно до того, як відшукати
дракона у східній міфології, істота надзвичайно рідкіста та потужна.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec19" <span style="font-size:medium">Лямбдагарбха</span>-->
<h3 id="sec19" class="subsection"><span style="font-size:medium">Лямбдагарбха</span></h3><!--SEC END --><p><span style="font-size:medium">Наступний рівень – це платформоутворюючий рівень,
який включає мову програмування, рантайм та апаратуру.
Зазвичай дорослі академічні мови створюються відразу з
рантаймом, тому назвемо цю секцію рівень університетського
професора, а секцію рантайму (ОС) та апаратура назвемо
підприємницької, оскільки ОС зазвичай продають разом
із залізом і всі, хто це намагався просувати на ринок,
можна прирівняти до бодхісатств. Останні відомі лямбдагарбхи —
це давні автори перших Лісп машин та XEROX PARC.</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index002.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 2: Лямбдагарбха</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><p><span style="font-size:medium">Однак дракони, як майсти кінцевих продуктів, покладаються
на роботу інших потужніх божеств — які можуть побудувати
самостійно і довести до впровадження віртуальні машини та
мови програмування, таких істот ще менше ніж драконів на платені Земля.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec20" <span style="font-size:medium">Гротендік</span>-->
<h3 id="sec20" class="subsection"><span style="font-size:medium">Гротендік</span></h3><!--SEC END --><p><span style="font-size:medium">На абсолютному рівні програмісти (у тому числі і топові) є
математиками, тому тут можна відзначити ядро, яке було відкрито
Квілен — модельні категорії, в яких працювали не тільки
медалісти Філдса - Воєводський і сам Квіллен, але які є
також основним інструментом сучасних теоретико-типових математиків
як Шульман. Предмет вивчає модельні категорії Квіллен назвав
гомотопічною алгеброю, за допомогою якої була побудована не
тільки модель топології алгебри самим Квілленом, але і A</span><sup><span style="font-size:medium">1</span></sup><span style="font-size:medium">-теорія
гомотопій Воєводського. Усе це кришується Гротендиком, як
мультидисциплінарним програмістом абсолютного рівня (топ-математиком).</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index003.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 3: Гротендік</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC subsection id="sec21" <span style="font-size:medium">Будда</span>-->
<h3 id="sec21" class="subsection"><span style="font-size:medium">Будда</span></h3><!--SEC END --><p><span style="font-size:medium">Без зайвої скромності, будь-який програміст, який зміг
не тільки уявити, а й встигнути попрацювати за життя
на всіх рівнях, може вважати себе Буддою програмування,
або як ми скромно називаємо таких пацанів — хуй з гори.</span></p><blockquote class="figure"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><div class="center"><span style="font-size:medium"><img src="index004.png"></span></div><span style="font-size:medium">
</span><div class="caption"><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td style="vertical-align:top;text-align:left;" ><span style="font-size:medium">Figure 4: Будда</span></td></tr>
</table></div><span style="font-size:medium">
</span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC subsection id="sec22" <span style="font-size:medium">Класифікація мов програмування</span>-->
<h3 id="sec22" class="subsection"><span style="font-size:medium">Класифікація мов програмування</span></h3><!--SEC END --><p><span style="font-size:medium">Повна класифікація об’єктів дослідження була злоблена в рамках проекту
Енциклопедія Мов Програмування, де була зроблена спроба надати
формальну БНФ-нотацію для всіх мов.
</span></p><blockquote class="table"><div class="center"><hr class="floatrule"></div><span style="font-size:medium">
</span><table style="border-spacing:6px;border-collapse:separate;" class="cellpading0"><tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> </span><span style="font-size:medium"><span style="font-weight:bold">Домен</span></span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium"><span style="font-weight:bold">Мови програмування</span></span><span style="font-size:medium"> </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> HW</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">VHDL, Verilog, Clash, Chisel, SystemC, Lava, BSV </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> ASM</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">PDP-11, VAX, S/360, M68K, </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">PowerPC, MIPS, SPARC, Super-H </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Intel, ARM, RISC-V </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> ALG</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">C, BCPL, ALGOL, SNOBOL, Simula, </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Pascal, Oberon, COBOL, PL/1 </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> ML</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">SML, Alice ML, OCaml, UrWeb, Flow, F# </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> PURE</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">HOPE, Miranda, Clean, Charity, Joy, Mercury, Elm, PureScript </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> F</span><sub><span style="font-size:medium">ω</span></sub></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Scala, Haskell, 1ML, Plutus </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> MACR</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">LISP, Scheme, Clojure, Racket, Dylan, LFE, CL </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Nemerle, Nim, Haxe, Perl, Elixir </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> OOI</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Simula, Smalltalk, Self, REBOL, Io </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">JS, Lua, Ruby, Python, PHP, TS, Java, Kotlin </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> CMP</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">C++, Rust, D, Swift, Fortran </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> SHELL</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">PowerShell, TCL, SH, CLIPS, BASIC, FORTH </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> SVC</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">IDL, SOAP, ASN.1, GRPC </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> MARK</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">TeX, PS, XML, SVG, CSS, ROFF, OWL, SGML, RDF, SysML </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> LOGIC</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">AUT-68, ACL2, LEGO, ALF, Prolog </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">CPL, Mizar, Dedukti, HOL, Isabelle, Z </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> </span><span style="font-size:medium">ΠΣ</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Coq, F*, Lean, NuPRL, ATS, Epigram, </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Cayenne, Idris, Dhall, Cedile, Kind </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> HoTT</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Menkar, Cubical, yacctt, redtt, RedPRL, Arend, Agda </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> CHKR</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">TLA+, Twelf, Promela, CSPM </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> PAR</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Ling, Pony, Erlang, BPMN, Ada, E, Go, Occam, Oz </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium"> ARR</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">Julia, Wolfram, MATHLAB, Octave, Futhark, APL </span></td></tr>
<tr><td style="text-align:left;white-space:nowrap" ><span style="font-size:medium">&nbsp;</span></td><td style="text-align:center;white-space:nowrap" ><span style="font-size:medium">SQL, cg, Clarion, Clipper, QCL, K, MUMPS, Q, R, S, J, O </span></td></tr>
<tr><td class="hrule" colspan=3><span style="font-size:medium"></span></td></tr>
</table><span style="font-size:medium">
<span style="font-size:small">Таблиця 1. Класифікація мов порграмування.
</span></span><div class="center"><hr class="floatrule"></div></blockquote><span style="font-size:medium">
</span><!--TOC section id="sec23" <span style="font-size:medium">Теоретичні основи</span>-->
<h2 id="sec23" class="section"><span style="font-size:medium">Теоретичні основи</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec24" <span style="font-size:medium">Метафілософія</span>-->
<h3 id="sec24" class="subsection"><span style="font-size:medium">Метафілософія</span></h3><!--SEC END --><p><span style="font-size:medium">Дуже коротко про сучасні філософії. Як визначити філософію предикативно,
то це науа, що вивчає наступний перелік питань:
1) як жити добре в достатку та гедонізмі максимально довго всім і не померти від воєн та метеоритів;
2) реальний світ та інші питання гнесеології;
3) свобода волі;
4) етика;
5) математика;
6) музика;
6) література,
— це всі питання, або мовні набори та форми, що цікавлять сучасних філософів.</span></p><p><span style="font-size:medium">У цій нотатці ми спробуємо побудувати формальну систему
і на її прикладі показати інтерпретацію трьох ліній
передачі сучасної філософії: європейської чи континентальної
філософії — школи, яка задала початок глобальній
інтерпретації світу та реконструкції мов, у тому числі
й математики; східної філософії як приклад особливої школи,
на прикладі якої ми будуватимемо модель; та аналітичної чи
англосаксонської філософії, що формалізується сучасною математикою.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec25" <span style="font-size:medium">Європейска філософія</span>-->
<h3 id="sec25" class="subsection"><span style="font-size:medium">Європейска філософія</span></h3><!--SEC END --><p><span style="font-size:medium">На наш погляд, головне питання європейської філософії — це Good Life.
Як жити, як жити добре самому, у соціумі, які цілі можуть стояти перед
індивідом та видом, баланс етики та етика балансу. Європейська
філософія народила геометорію, психоаналіз, навчила людей не
боятися свободи, трансформувати агресію, бути більш зрілою
істотою, і під вінець свого розвитку поставила питання про
мову та мовну гру, як основний інструмент рефлексуючої свідомості.</span></p><p><span style="font-size:medium">Мова перестала мати ґрунт, вона стала просто візерунками, семантика
яких втрачена, філософія стала формою літературного мистецтва.</span></p><p><span style="font-size:medium">Представники континентальної філософії: Арістотель, Платон, Кант,
Декарт, Ніцше, Фрейд, Юнг, Юм, Хайдегер, Адорно, Хабермас, Делез.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec26" <span style="font-size:medium">Тибетська філософія</span>-->
<h3 id="sec26" class="subsection"><span style="font-size:medium">Тибетська філософія</span></h3><!--SEC END --><p><span style="font-size:medium">У східній філософії центральним питанням є визволення себе
і інших, в першу чергу від різних форм страждання. Ця філософія
має чітку систему, яка нерозривно пов’язана з тілесними та
розумовими практиками, і вижила протягом тисячоліть у
законсерованому гірському плато. Тут також порушуються
питання етики та свободи волі, але основний наголос робиться
на інтелектуальні та неконцептуальні вправи, що ведуть до
безпосереднього переживання простору.</span></p><p><span style="font-size:medium">Деякі формулювання східної філософії, такі як недвійність
всіх феноменів піддаються формалізації в гомотопічній
теорії типів (використовуючи методи аналітичної філософії),
що спонукало до подальших досліджень у галузі формалізації
езотеричних теорій.</span></p><p><span style="font-size:medium">Представники східної (тибетської) філософії: Атіша, Нагарджуна,
Бхававівека, Камалашила, Шантаpакшита, Арьядева, Бyддхапаліта,
Чандракірті, Цонкапа, Міпам, Лонгченпа.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec27" <span style="font-size:medium">Аналітична філософія</span>-->
<h3 id="sec27" class="subsection"><span style="font-size:medium">Аналітична філософія</span></h3><!--SEC END --><p><span style="font-size:medium">Аналітична філософія народжена в математиці, рання аналітична
філософія починається напевно з Лейбніца, Ньютона та Ейлера.
Пізня аналітична філософія починається З Фреге і за списком:
Рассел, Уайтхед, Дедекінд, Пеано, Гільберт, Фон-Нейман, Каррі,
Акерманн, Карнап, Сколем, Пост, Гедель, Черч, Берньє, Тюрінг,
Кліні, Россер, Мак-Лейн Ловір, Гротендік, Скотт, Джояль,
Терньє, Мартін-Леф, Мілнер, Жирар, Плоткін, Рейнольдс,
Бакус, Барр, Барендрехт, Лер’є, Силі, Кокан, Х’юет, Ламбек,
Воєводський, Еводі, Шульман, Шрайбер.</span></p><p><span style="font-size:medium">Якщо описати двома словами головне питання аналітичної
філософії — це мова простору. Побудова мови, яка дасть
формальний фундамент не лише математики та роздумів, а й самої філософії.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec28" <span style="font-size:medium">Мова простору</span>-->
<h4 id="sec28" class="subsubsection"><span style="font-size:medium">Мова простору</span></h4><!--SEC END --><p><span style="font-size:medium">Формальні підстави мови роздумів, математики (усієї) та фізики (всесвіту).</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec29" <span style="font-size:medium">Мовні фреймворки</span>-->
<h4 id="sec29" class="subsubsection"><span style="font-size:medium">Мовні фреймворки</span></h4><!--SEC END --><p><span style="font-size:medium">Мовні фреймворки для менш формальних (з парадоксами) та нечітких (стохастичних) систем.</span></p><span style="font-size:medium">
</span><!--TOC subsubsection id="sec30" <span style="font-size:medium">Конкретні соціальні дифузійні моделі</span>-->
<h4 id="sec30" class="subsubsection"><span style="font-size:medium">Конкретні соціальні дифузійні моделі</span></h4><!--SEC END --><p><span style="font-size:medium">Прикладна філософія Використання мовних фреймворків для опису конкретних феноменів.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec31" <span style="font-size:medium">Таємні настанови</span>-->
<h2 id="sec31" class="section"><span style="font-size:medium">Таємні настанови</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec32" <span style="font-size:medium">Аспекти курсу</span>-->
<h3 id="sec32" class="subsection"><span style="font-size:medium">Аспекти курсу</span></h3><!--SEC END --><p><span style="font-size:medium">Після того, як у перших двох розділах ми розповіли про
топову мотивацію та топове мислення, перейдемо до топового
курсу топового програміста. Структура цього курсу програмування
буде дуже відрізнятися від інших підходів до навчання, але цей
курс є курсом, який я намагався "побачити" крізь ретроспективу
свого професійного досвіду, що стосується безпосередньо
програмування, того, як я бачу топовість цього процесу.</span></p><p><span style="font-size:medium">Перед початком зі структури курсу я хочу показати основні
індикатори (аспекти курсу), на які варто орієнтуватися при
виборі топових напрямків у програмуванні. Тому що саме ці
індикатори визначають ті предмети та їх послідовність в
якій ви повинні поглащати інформацію, щоб наблизитися до
максимальної топовості.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec33" <span style="font-size:medium">Гранична точність</span>-->
<h3 id="sec33" class="subsection"><span style="font-size:medium">Гранична точність</span></h3><!--SEC END --><p><span style="font-size:medium">Гранична точність означає абсолютні обчислення. У цю вигадану
категорію я включаю всі галузі програмування та математичного
моделювання, які вимагають абсолютної формальної точності:
системи доказу теорем, спеціалізовані формальні верифікатори
моделей, системи символьної алгебри, системи обчислювальної
гомологічної алгебри, тобто. ті системи моделювання, які не
тільки розкладатимуть саму систему до атомів, але ще й найближчу
метамодель на рівень вище, яку теж потрібно формалізувати, щоб
верифікувати самі моделі. Сюди входять такі галузі як
процесоробудування (модель чекерів друкованих плат,
процесорів, спеціалізовані мови програмування типу VHDL),
мовобудування (системи типів, формальні мови програмування,
мови загального призначення). Сюди також входять: будь-які
формальні математичні теорії, формальні логіки, мова кванторів Пі та Сігма.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec34" <span style="font-size:medium">Гранична оптимальність</span>-->
<h3 id="sec34" class="subsection"><span style="font-size:medium">Гранична оптимальність</span></h3><!--SEC END --><p><span style="font-size:medium">Гранична оптимальність означає мінімальну кількість зусиль,
доданих до досягнення мети. Сюди входять дискретні завдання
міні-максу, лінійне програмування, симплекс-методи, поліедральне
багатовимірне симплектичне програмування, методи оптимізації.
У фізиці це основний принцип варіаційного числення, мінімальні
геодезичні лінії. Ваша система не тільки повинна бути
максимально точною, в апогеї абсолютно точною, але і
повинна бути закодована оптимальним чином, не містити
частин, що повторюються, займати мінімальний футпринт
по обмеженій кількості пам’яті і обчислювальних потужностей.
Краще, щоб була теорема яка доводить цю мінімальність,
як наприклад, чорч-кодування індуктивних типів як природне
кодування будь-яких структур у лямбда численні, оптимальні
лямбда евалуатори і т.д. Гранична оптимальність означає
також вищий пілотаж у прототипуванні та створенні MVP ескізів.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec35" <span style="font-size:medium">Гранична складність</span>-->
<h3 id="sec35" class="subsection"><span style="font-size:medium">Гранична складність</span></h3><!--SEC END --><p><span style="font-size:medium">Гранична складність означає дослівно максимальну складність
системи, з якою потрібно працювати. Якщо раптом виявиться,
що вам складності декартово-замкнутих категорій мало, завжди
можна перейти до симетричних модальних категорій, в яких живуть
такі мови програмування: квантові мови програмування,
конкруретні паралельні системи типу Erlang, системи
лінійних типів, мови для обробки тензорів. Також гранична
складність має на увазі наявність вже в системі граничної
точності та граничної оптимальності, інакше без першого у
вас буде просто непрацююче гівно, у відсутності другого у
вас буде мільйони рядків дублюючого коду, які не впливають
на реальну складність проекту. Якщо ви хочете побачити реальну
складність подивіться кубічні докази К-теорії.</span></p><p><span style="font-size:medium">Це стосується більш-менш чистих тем з логіки, дискретної
математики та програмування. У міждисциплінарному підході,
якщо ви хочете стати не топовим програмістом, а, наприклад,
топовим біофізиком, то список тем буде іншим. Гранична точність
там замінюється на математичну статистику та стохастичну фізику,
гранична оптимальність пов’язана з топологією просторів,
а гранична складність виражається в об’єднанні полів і,
як приклад, стандартної моделі. Ну а в біофізиці складність
збільшується топологічними різноманіттями нейромереж як
ієрархічних процесів, що працюють з тензорними потоками.
Гомотопічна теорія типів як мова програмування інфітіні
топосу є у фізиці аналогом теорії струн. Біофізика ж є
більш дисипативними структурами, які втрачають межі
точності, таким чином завдання створення AI не повною
мірою відповідає абсолютній точності. Я би сказав що AI
це більше системна інженерія та прикладна область, в той
час, як абсолютна точність це більше сфера математичного
програмування. І навіть машинне навчання при детальному
розгляді зводиться до статистичної точності, прогнозованої
оптимальності та системної складності.</span></p><p><span style="font-size:medium">Я як прихильник абсолютної складності вважаю, що будь-яка
сучасна PhD повинна містити міждисциплінарний підхід. Як
необхідний мінімум у міжнародній науковій практиці пропоную
розглянути міждисциплінарний підхід, який базується всього
на двох особливих дисциплінах: УДК 51 (математика) та
УДК 004 (програмування). В якості особливих вони обрані
тому, що будь-яка інша дисципліна базується на чистій
математиці, а для проведення будь-якого моделювання
(перевірки перевірки теорії), потрібен фундаментальний курс програмування.</span></p><p><span style="font-size:medium">Цікаво, що третій із цих індикаторів можна інвертувати
і при цьому оптимізаційний вектор (максимальна точність,
максимальна оптимальність та мінімальна складність) теж
виявиться цікавим об’єктом розгляду. В суті це вимоги,
що висуваються до бібліотек програмного забезпечення:
вони повинні бути максимально формальними з доказами
властивостей їх моделей, повинні бути оптимально
змодельовані або володіти оптимальним екстрактом
в інші моделі, але при цьому також повинні бути
максимально простими або мінімально складними у
загальній картині компонентів. Філософія N2O точно
відповідає такому альтернативному оптимізаційному
вектору, але вирішуючи завдання технологічних стеків
не можна стати топовим програмістом, потрібно
збільшувати складність, наприклад у бік складних
соціо-інформаційних систем, як ERP системи управління
підприємством, де десятки тисяч таблиць кожна по
сотні полів звична складність для бізнес-аналітиків,
що працюють з такими продуктами як SAP S/3.</span></p><p><span style="font-size:medium">Забавно, що в езотеричному буддизмі Тибету,
ці три критерії застосовуються в настановах
з візуалізації у вищих тантрах: ви повинні
максимально детально (до волосся і фактури
тканин одягу — принцип максимальної точності)
представити дуже складний об’єкт (18-руке божество
в союзі з дружиною, свитою та аттрибутами — принцип
максимальної складності) максимально швидко (бажано
миттєво — принцип оптимальності). Учні, які можуть
це робити не "на словах", а "на ділі" - вбудовуючи
картинку силою думки і уяви навіть не на січень очі,
а прямо на кору головного мозку, випалюючи зображення
у своєму мисленні на простирадлі уявного всесвіту —
вважаються топовими медитаторами . Для наочного прикладу
хочу показати приблизну якість візуалізації, що
утримується в просторі свого мислення, якого може
досягти середній за здібностями європеоїд-медитатор
за 3 роки наполегливої практики:</span></p><p><span style="font-size:medium">Напевно, тому досі не існує жодного просвітленого
європейця! Ця картинка також наочна демонстрації
того, що ви можете досягти за 3 роки навчання (думаю,
що у відділу PhD хлопців із NASA, підготовка до рендеру
цієї картинки зайняла три роки).</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec36" <span style="font-size:medium">Гранична унікальність</span>-->
<h3 id="sec36" class="subsection"><span style="font-size:medium">Гранична унікальність</span></h3><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec37" <span style="font-size:medium">Гранична застосовуваність</span>-->
<h3 id="sec37" class="subsection"><span style="font-size:medium">Гранична застосовуваність</span></h3><!--SEC END --><span style="font-size:medium">
</span><!--TOC section id="sec38" <span style="font-size:medium">Практика</span>-->
<h2 id="sec38" class="section"><span style="font-size:medium">Практика</span></h2><!--SEC END --><span style="font-size:medium">
</span><!--TOC subsection id="sec39" <span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span>-->
<h3 id="sec39" class="subsection"><span style="font-size:medium">Спочатку йога розуму, потім вже йога тіла</span></h3><!--SEC END --><p><span style="font-size:medium">Рано чи пізно всі, хто займається йогою розуму при належному
успіху, так чи інакше переходять до освоєння йоги тіла, яке
є продовженням розуму. Секрет успішної практики в тому, що
як і йога розуму, йога тіла потребує ще більшої усвідомленості.
Під йогою тіла ми розумітимемо тут такого роду енергії,
які ви можете пережити тільки в режимі ексремального спорту,
там де ревард дуже високий. У спорті це X-спорт, у сексі це
BSDM, підходить усі дисципліни, де є стоп-слово, за кордоном
якого одразу настає термінація істоти.</span></p><p><span style="font-size:medium">Чому йога тіла повинна йти обов’язково після укрупнення
на практиці йоги розуму? На це є кілька причин. Вважається,
що основа сталого і дорослого мислення це правильне світогляд,
яке має формуватися істотою під час вивчення філософських
дисциплін, невирішених питань трансгуманізму та інших
базових принципів. Дотримуючись позасектарного іміджу,
самі базові принципи світогляду топового програмісти
були зацементовані в першому випуску.</span></p><p><span style="font-size:medium">Поклавши неправильний майндсет у основу Вивчення,
Роздуми та Медитації ви створите пролом, через який
у критичний момент вашого життя при зустрічі з Буддою
ваше бачення світу зруйнується як дитячий замок із піску
після припливу. Для тренування розуму алмазної міцності
та гостроти і призначені практики формування правильно
погляду на об’єкт дослідження свого власного розуму,
за зрадами якого не існують ніякі феномени.</span></p><p><span style="font-size:medium">Як і йога розуму, йога тіла передбачає два режими
дослідження: пандіта стайл (вивчення теорії) та йога
стайл (практика). Засвоївшись і зміцнившись у своїй
свідомості, істота, що рухається головним принципом
будда-такості, прагненням до всезнання і повної реалізації,
зерном якого є пізнання феноменів, починає виходити за
рамки ментальних феноменів і починає усвідомлювати себе
і своє тіло як частину мислення, і природним чином
починає експериментувати з тілом, розширюючи свій
фронтир сприйняття.</span></p><p><span style="font-size:medium">Головний критерій, який показує, чи можна вам
переходити до спорту, це повний контроль над
дофаміновою та епініфриновою системою. Деякі
занадто вразливі спортсмени використовують THC
для супресії дофаміну та м’якшої йога-сесії.
Зазвичай рекомендується входити в спорт у 40
років, тому що в 25 і кілька років після цього
потрібно присвятити математиці та філософії,
адже кращого часу вже не буде і повернути його
буде непросто! А у 40 уже дофаміновий фон сам
по собі зникне і залишиться лише чистий розум
та террейн. Це друга безжальна причина через
яку спорт краще відкласти до adult віку. Є й
інший бік медалі: рани після 40 гояться гірше,
тому і ставки і гострота і ревард у такому разі
вищі. Ідеально це маючи гострий розум не робити
взагалі серйозних помилок на шляху спорту.
Неідеальні випадки вирішуються імплантацією
титанових пластин.</span></p><p><span style="font-size:medium">Непрямий критерій це коли ви досягли рівня
безпосереднього переживання ототожнення мови
простору (випуск Х), карти місцевості (випуск 4)
і свого мислення (випуск 2), у такому разі вихід
з локальної самсари у вигляді темниці розуму
знаменуватиме вихід у реальний світ на планету
Земля. Алегорія яка мені бачиться тут така: мати
відправляють свого сина до університету, передавши
йому всі необхідні знання, які допоможуть йому жити
далі автономно</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec40" <span style="font-size:medium">Программування та спорт</span>-->
<h3 id="sec40" class="subsection"><span style="font-size:medium">Программування та спорт</span></h3><!--SEC END --><p><span style="font-size:medium">Гуру у спорті знайти так само важко, як і гуру в
програмуванні. У світському житті гуру спорту
працюють олімпійськими чемпіонами або чемпіонами
з дисциплін, які до цього прирівнюються. Саме їхнє
існування вже є вченням. Розбираючи до найдрібніших
деталей покадрове трейси топ-спорсменів на youtube
ви отримуєте алмазні знання віртуоза-ньюскулера
методично відточуючи техніку, маючи зразок для
верифікації. Гуру спорту меншого калібру працюватимуть
інструкторами на найближчому спортивному курорті,
рекламуватимуть газировку та еквіпмент або
пропонуватимуть вам тури національними заповідниками.</span></p><p><span style="font-size:medium">Не всі це говорять прямо, але у спорті важливими
є картинки, які проходять через вашу сіточку та
всі органи почуттів, тому цінуються картинки
природного ландшафту Землі, щоб звільнити своє
мислення вже за межами тіла, охопивши своїм
мисленням усю планету та її феномени, головний
з яких гравітація, таким чином ставши воістину
космічною дитиною планетарного масштабу.</span></p><p><span style="font-size:medium">Однак у розмовах з локальними спортивними гуру
ви отримаєте максимум репресивні монотонні лекції
про шкоду куріння на Джомолунгмі, жахливі команди
інструкторів-обивателів, юрби туристів на своєму
шляху. Доросла людина, що оволоділа йогою розуму,
сама повинна стати собі гуру і планувати кожну
вилазку на зустріч з гравітацією як проект з
багатьма параметрами-змінними, від опрацювання
якого залежить ваше життя.</span></p><p><span style="font-size:medium">Всі ці гуру будуть говорити вам, що тільки вони
розуміють суть речей, пізнали природу в немисленні,
а у вас великий тягар йоги-розуму, який заважає
вам досягати результатів, заморочки, зайва
концептуалізація, надмірна начитаність та інші
смертні гріхи. Тут діє таке ж правило як і в
дитячому садку, школі або університеті "розумних
не люблять", тому майте це на увазі поговорити
по душах за багаттям з черговим спортивним гуру.</span></p><p><span style="font-size:medium">Розумна і раціональна людина завжди вибере більш
рідкісну та філігранну йогу розуму замість йоги
тіла, якою володіє значно більша кількість істот.
Адже отримати алмаз розуму набагато складніше,
ніж алмаз тіла, тому партнери зі спорту і навіть
локальні гуру, будуть готові в прямому сенсі
підсвідомо вас убити на схилі, тут теж потрібне око та око.</span></p><p><span style="font-size:medium">У буддизмі Тибету аналогом спорту є таємне
посвята каналів, вітрів і сфер структури вашої
алмазної мережі. Всі ці йоги виконуються в парі
з опорою на партнера і дістатися цього рівня буде
важко обивателю. Тим більше, що таких гуру ще
менше, ніж спортивних.</span></p><span style="font-size:medium">
</span><!--TOC subsection id="sec41" <span style="font-size:medium">Баланс</span>-->
<h3 id="sec41" class="subsection"><span style="font-size:medium">Баланс</span></h3><!--SEC END --><p><span style="font-size:medium">Головний наркотик для йоги-розуму та йогі-тіла
це цукор. Усі спорсмени як мінімум висять на
кока-колі, ред-булі, гелях, стимуляторах. Баланс
цих речовин і правильне харчування – ключ до
швидкого відновлення після спортивних сесій,
які так чи інакше потрібно буде заліковувати
перед повноцінними сесіями йоги розуму. Ігнорувати
допоміжні речовини на шляху спорту марнославно, але
й зловживати не варто. Головний критерій,
безперервність, ви повинні планувати вашу
подорож таким чином, щоб ваша свідомість
не похитнулася від раптової зміни гормонального
фону, дефіциту того чи іншого паливного елемента.</span></p><span style="font-size:medium">
</span><!--TOC section id="sec42" <span style="font-size:medium">Посвята всім святим програмістам</span>-->
<h2 id="sec42" class="section"><span style="font-size:medium">Посвята всім святим програмістам</span></h2><!--SEC END --><p><span style="font-size:medium">Складаю список святих програмістів. З кого почати? Почну а
Ади Гольдберг та Алана Кея</span><sup><a id="text1" href="#note1"><span style="font-size:medium">1</span></a></sup><span style="font-size:medium">. Потім Грінблат та Госпер</span><sup><a id="text2" href="#note2"><span style="font-size:medium">2</span></a></sup><span style="font-size:medium">.
Далі йде Кей Айверсон</span><sup><a id="text3" href="#note3"><span style="font-size:medium">3</span></a></sup><span style="font-size:medium"> і Джон МакКарті</span><sup><a id="text4" href="#note4"><span style="font-size:medium">4</span></a></sup><span style="font-size:medium">.
Далі йдуть Лінус Торвальдс</span><sup><a id="text5" href="#note5"><span style="font-size:medium">5</span></a></sup><span style="font-size:medium">, Дейв Катлер</span><sup><a id="text6" href="#note6"><span style="font-size:medium">6</span></a></sup><span style="font-size:medium">, Аветіс Теванян</span><sup><a id="text7" href="#note7"><span style="font-size:medium">7</span></a></sup><span style="font-size:medium">.
Не забуваємо про Джона Бакуса</span><sup><a id="text8" href="#note8"><span style="font-size:medium">8</span></a></sup><span style="font-size:medium"> та Робіна Мілнера</span><sup><a id="text9" href="#note9"><span style="font-size:medium">9</span></a></sup><span style="font-size:medium">.
Головним чином пам’ятаємо Ксав’є Лероя</span><sup><a id="text10" href="#note10"><span style="font-size:medium">10</span></a></sup><span style="font-size:medium">, Джо Армстронга</span><sup><a id="text11" href="#note11"><span style="font-size:medium">11</span></a></sup><span style="font-size:medium">,
Саймона Пейтона-Джонса</span><sup><a id="text12" href="#note12"><span style="font-size:medium">12</span></a></sup><span style="font-size:medium"> і мало-відомого Ральфа Юнга</span><sup><a id="text13" href="#note13"><span style="font-size:medium">13</span></a></sup><span style="font-size:medium">.
У часи нюдьги молимося Джону Кармаку</span><sup><a id="text14" href="#note14"><span style="font-size:medium">14</span></a></sup><span style="font-size:medium">, Казунорі Ямаучі</span><sup><a id="text15" href="#note15"><span style="font-size:medium">15</span></a></sup><span style="font-size:medium">, Амерікан МакГі</span><sup><a id="text16" href="#note16"><span style="font-size:medium">16</span></a></sup><span style="font-size:medium">.</span></p><p><span style="font-size:medium">Виділяємо окремо майстів нідерландської школи: Ерік Мейер</span><sup><a id="text17" href="#note17"><span style="font-size:medium">17</span></a></sup><span style="font-size:medium">,
Хенк Барендрегт</span><sup><a id="text18" href="#note18"><span style="font-size:medium">18</span></a></sup><span style="font-size:medium">, Ніколас де Брейн</span><sup><a id="text19" href="#note19"><span style="font-size:medium">19</span></a></sup><span style="font-size:medium">.
Тері Кокан</span><sup><a id="text20" href="#note20"><span style="font-size:medium">20</span></a></sup><span style="font-size:medium">, Жерар Юе</span><sup><a id="text21" href="#note21"><span style="font-size:medium">21</span></a></sup><span style="font-size:medium"> топові математики-програмісти.
Ми дякуємо Вінту Сьорфу</span><sup><a id="text22" href="#note22"><span style="font-size:medium">22</span></a></sup><span style="font-size:medium">, Леслі Лампорту</span><sup><a id="text23" href="#note23"><span style="font-size:medium">23</span></a></sup><span style="font-size:medium">, Алану Коксу</span><sup><a id="text24" href="#note24"><span style="font-size:medium">24</span></a></sup><span style="font-size:medium">,
Тео де Раадту</span><sup><a id="text25" href="#note25"><span style="font-size:medium">25</span></a></sup><span style="font-size:medium">, Кліву Моулеру</span><sup><a id="text26" href="#note26"><span style="font-size:medium">26</span></a></sup><span style="font-size:medium">, Джефу Діну</span><sup><a id="text27" href="#note27"><span style="font-size:medium">27</span></a></sup><span style="font-size:medium">.
Не забуваємо про Фабріса Беллара, Тревіса Гейсельбрехта</span><sup><a id="text28" href="#note28"><span style="font-size:medium">28</span></a></sup><span style="font-size:medium">,
Александра ван дер Грінтена</span><sup><a id="text29" href="#note29"><span style="font-size:medium">29</span></a></sup><span style="font-size:medium">.
Шануємо та поважаємо Ульфа Норела</span><sup><a id="text30" href="#note30"><span style="font-size:medium">30</span></a></sup><span style="font-size:medium">, Леонардо де Мура</span><sup><a id="text31" href="#note31"><span style="font-size:medium">31</span></a></sup><span style="font-size:medium">.
Відмічаємо Бена Фрая</span><sup><a id="text32" href="#note32"><span style="font-size:medium">32</span></a></sup><span style="font-size:medium">, Стефана Вольфрама</span><sup><a id="text33" href="#note33"><span style="font-size:medium">33</span></a></sup><span style="font-size:medium"> і Йоахіма Нойбузера</span><sup><a id="text34" href="#note34"><span style="font-size:medium">34</span></a></sup><span style="font-size:medium">.
Йохен Лидтке</span><sup><a id="text35" href="#note35"><span style="font-size:medium">35</span></a></sup><span style="font-size:medium">, Ада Лавлас</span><sup><a id="text36" href="#note36"><span style="font-size:medium">36</span></a></sup><span style="font-size:medium">, Девід Люкхем</span><sup><a id="text37" href="#note37"><span style="font-size:medium">37</span></a></sup><span style="font-size:medium">.</span></p><!--BEGIN NOTES document-->
<hr class="footnoterule"><dl class="thefootnotes"><dt class="dt-thefootnotes">
<a id="note1" href="#text1">1</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автори Smalltalk</div></dd><dt class="dt-thefootnotes"><a id="note2" href="#text2">2</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автори TX-0</div></dd><dt class="dt-thefootnotes"><a id="note3" href="#text3">3</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор APL</div></dd><dt class="dt-thefootnotes"><a id="note4" href="#text4">4</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор LISP</div></dd><dt class="dt-thefootnotes"><a id="note5" href="#text5">5</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Linux</div></dd><dt class="dt-thefootnotes"><a id="note6" href="#text6">6</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Windows NT</div></dd><dt class="dt-thefootnotes"><a id="note7" href="#text7">7</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор NeXT</div></dd><dt class="dt-thefootnotes"><a id="note8" href="#text8">8</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор BNF</div></dd><dt class="dt-thefootnotes"><a id="note9" href="#text9">9</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор ML</div></dd><dt class="dt-thefootnotes"><a id="note10" href="#text10">10</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор OCaml</div></dd><dt class="dt-thefootnotes"><a id="note11" href="#text11">11</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Erlang</div></dd><dt class="dt-thefootnotes"><a id="note12" href="#text12">12</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Haskell</div></dd><dt class="dt-thefootnotes"><a id="note13" href="#text13">13</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор формальної моделі Rust</div></dd><dt class="dt-thefootnotes"><a id="note14" href="#text14">14</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Quake</div></dd><dt class="dt-thefootnotes"><a id="note15" href="#text15">15</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Gran Turismo</div></dd><dt class="dt-thefootnotes"><a id="note16" href="#text16">16</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор MacGee’s Alice</div></dd><dt class="dt-thefootnotes"><a id="note17" href="#text17">17</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор LINQ</div></dd><dt class="dt-thefootnotes"><a id="note18" href="#text18">18</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор лямбда-кубу</div></dd><dt class="dt-thefootnotes"><a id="note19" href="#text19">19</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор фібраційної верифікації</div></dd><dt class="dt-thefootnotes"><a id="note20" href="#text20">20</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор числення конструкцій</div></dd><dt class="dt-thefootnotes"><a id="note21" href="#text21">21</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">математик логік</div></dd><dt class="dt-thefootnotes"><a id="note22" href="#text22">22</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор TCP/IP</div></dd><dt class="dt-thefootnotes"><a id="note23" href="#text23">23</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор LaTeX та TLA+</div></dd><dt class="dt-thefootnotes"><a id="note24" href="#text24">24</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Linux SMP</div></dd><dt class="dt-thefootnotes"><a id="note25" href="#text25">25</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">атвор OpenBSD</div></dd><dt class="dt-thefootnotes"><a id="note26" href="#text26">26</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор LAPACK</div></dd><dt class="dt-thefootnotes"><a id="note27" href="#text27">27</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор leveldb, TensorFlow</div></dd><dt class="dt-thefootnotes"><a id="note28" href="#text28">28</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор newos, BeOS, BeFS</div></dd><dt class="dt-thefootnotes"><a id="note29" href="#text29">29</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Managarm</div></dd><dt class="dt-thefootnotes"><a id="note30" href="#text30">30</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Agda</div></dd><dt class="dt-thefootnotes"><a id="note31" href="#text31">31</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">aвтор Lean</div></dd><dt class="dt-thefootnotes"><a id="note32" href="#text32">32</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Processing</div></dd><dt class="dt-thefootnotes"><a id="note33" href="#text33">33</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор Mathematica</div></dd><dt class="dt-thefootnotes"><a id="note34" href="#text34">34</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор GAP</div></dd><dt class="dt-thefootnotes"><a id="note35" href="#text35">35</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">автор L4</div></dd><dt class="dt-thefootnotes"><a id="note36" href="#text36">36</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">піонер програміст</div></dd><dt class="dt-thefootnotes"><a id="note37" href="#text37">37</a></dt><dd class="dd-thefootnotes"><div class="footnotetext">піонер формальної верифікації</div></dd></dl>
<!--END NOTES-->
<!--CUT END -->
<!--HTMLFOOT-->
<!--ENDHTML-->
</body>
</html>
